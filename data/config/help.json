{
	"整型": "基础数据类型: 整型    英文名称: int\n本数据类型为基础类型，占用4字节。\n范围：-2147483648 到 2147483647",
	"正整型": "基础数据类型: 正整型  英文名称: uint\n本数据类型为基础类型，占用4字节。\n范围: 0 到 4294967295",
	"短整型": "基础数据类型: 短整型  英文名称: short\n本数据类型为基础类型，占用2字节。\n范围：-32768 到 32767",
	"正短整型": "基础数据类型: 正短整型  英文名称: ushort\n本数据类型为基础类型，占用2字节。\n范围: 0 到 65,535",
	"长整型": "基础数据类型: 长整型  英文名称: long int（int64）\n本数据类型为基础类型，占用8字节。\n范围：-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807",
	"正长整型": "基础数据类型: 正长整型  英文名称: ulong int（uint64）\n本数据类型为基础类型，占用8字节。\n范围: 0 到 18,446,744,073,709,551,615",
	"浮点型": "基础数据类型: 浮点型  英文名称: float\n本数据类型为基础类型，占用4字节。\n范围: 占4个字节（32位）内存空间，+/- 3.4e +/- 38 (~7 个数字)",
	"双浮点型": "基础数据类型: 双浮点型  英文名称: double\n本数据类型为基础类型，占用4字节。\n范围: 占8 个字节（64位）内存空间，+/- 1.7e +/- 308 (~15 个数字)",
	"逻辑型": "基础数据类型: 逻辑型  英文名称: BOOL\n本数据类型为基础类型，占用4字节。\n范围: 0 到 1，即:真(1)和假(0)",
	"逻辑型c": "基础数据类型: 逻辑型c  英文名称: bool\n本数据类型为基础类型，占用1字节。\n范围: 0 到 1，即:真(1)和假(0)",
	"字节型": "基础数据类型: 字节型  英文名称: BYTE\n本数据类型为基础类型，占用1字节。\n范围: 从0-255的无符号类型，所以不能表示负数",
	"字符型A": "基础数据类型: 字符型A  英文名称: char\n本数据类型为基础类型，占用1字节。\n范围：-128 到 127 或者 0 到 255。相关示例请查阅:014-字符型和文本型的了解",
	"字符型": "基础数据类型: 字符型  英文名称: wchar_t\n本数据类型为基础类型，占用2字节。相关示例请查阅:014-字符型和文本型的了解",
	"文本型": "基础数据类型: 文本型  英文名称: CXText\n本数据类型为类，相关示例请查阅:014-字符型和文本型的了解",
	"字节集": "基础数据类型: 字节集  英文名称: CXBytes\n本数据类型为类，相关示例请查阅:015-字节集学习",
	"空类型": "基础数据类型: 空类型  英文名称: void\n本数据类型为基础类型，例如:viod*不确定的类型指针",
	"如果": "流程控制命令: 如果...否则...  英文名称: if...else...\n例如:\n如果 (条件)\n\t调试输出(\"满足条件, 执行子集块代码\")\n否则 (条件)\n\t调试输出(\"满足条件, 执行子集块代码\")\n否则  //否则后面跟随条件是可选的\n\t调试输出(\"以上条件都不满足,执行子集块代码\")",
	"否则": "流程控制命令: 如果...否则...  英文名称: if...else...\n例如:\n如果 (条件)\n\t调试输出(\"满足条件, 执行子集块代码\")\n否则 (条件)\n\t调试输出(\"满足条件, 执行子集块代码\")\n否则  //否则后面跟随条件是可选的\n\t调试输出(\"以上条件都不满足,执行子集块代码\")",
	"循环": "流程控制命令: 循环  英文名称: while\n调用格式: 循环（条件）\n例如:\n循环（条件）\n\t调试输出(\"条件成立时, 循环执行子集块, 直到条件不成立为止\")",
	"变量循环": "流程控制命令: 变量循环  英文名称: for\n调用格式: 变量循环（初始语句; 条件; 递增语句）\n例如:\n变量循环 (整型 i=0; i<3; i++)\n\t调试输出(i) //循环执行子集块代码,直到条件不成立为止",
	"计次循环": "流程控制命令: 计次循环  英文名称: for_count\n调用格式: 计次循环 (初始语句; 循环次数)\n指定循环变量初始值和循环次数, 变量每次递增1\n例如:\n变量循环 (整型 i=0; 3)\n\t调试输出(i)\n//变量i: 为循环索引; 数字3: 为循环次数; 当i=0时循环3次(0,1,2), 当i=1时循环3次(1,2,3)\n",
	"列表循环": "流程控制命令: 列表循环  英文名称: for_list\n调用格式: 列表循环 (初始语句; 循环列表)\n列表支持类型: 普通数组, 动态数组\n例如:\n列表循环 (整型 i=0;  数组)\n\t调试输出(数组[i]) //循环执行子集块, 直到循环完数组所有成员",

	"循环判断首": "流程控制命令: 循环判断首...循环判断尾 英文名称: do...while_end\n与 循环() 不同的是, 先循环后判断\n例如:\n循环判断首\n\t调试输出(1)\n循环判断尾 (条件)",

	"分支判断": "流程控制命令: 分支判断  英文名称: switch\n调用格式: 分支判断（整型或枚举类型）\n一个 分支判断 语句允许测试一个变量等于多个值时的情况",
	"分支判断跳出": "流程控制命令: 分支判断跳出  英文名称: switch_break\n调用格式: 分支判断跳出（整型或枚举类型）\n一个 分支判断 语句允许测试一个变量等于多个值时的情况。无需手动加跳出命令",
	"跳出": "流程控制命令: 跳出  英文名称: break\n调用格式: 跳出\n终止 循环 或 分支判断 等语句，程序流将继续执行紧接着 循环 或 分支判断 等 的下一条语句",
	"到循环尾": "流程控制命令: 到循环尾  英文名称: continue\n调用格式: 到循环尾\n会跳过当前循环中的代码，强迫开始下一次循环",
	"其他": "流程控制命令: 其他  英文名称: default\n调用格式: 其他\n在分支判断用于执行其他条件代码",
	"结构体": "关键字: 结构体  英文名称: struct\n调用格式: 结构体 结构体名称\n用于声明一个数据结构的关键字，定义了一个包含多个成员的新的数据类型\n例如:\n结构体 坐标结构\n\t整型  x  //结构体成员x\n\t整型  y  //结构体成员y",
	"类": "关键字: 类  英文名称: class\n调用格式: 类 类名称\n用于声明一个类的关键字，是一种用户自定义的数据类型，它是一种封装了数据和函数的组合\n本类(this)指当前类自身\n例如:\n类 类名称\n\t整型  _变量\n\t函数 构造() //类初始化\n\t\t_变量=0\n\t函数 析构() //类销毁时触发\n\t\t占位\n\t函数 整型 函数(整型 参数A, 整型 参数B)\n\t\t返回 0",
	"公开": "关键字: 公开  英文名称: public\n调用格式: 公开 类成员(包括:变量/常量/结构/函数等)\n关键字 公开 确定了类成员的访问属性。在类对象作用域内，公开成员在类的外部是可访问的",
	"私有": "关键字: 私有  英文名称: private\n调用格式: 私有 类成员(包括:变量/常量/结构/函数等)\n关键字 私有 确定了类成员的访问属性。在类对象作用域内，私有成员在类的外部是不可访问的",
	"保护": "关键字: 保护  英文名称: protected\n调用格式: 保护 类成员(包括:变量/常量/结构/函数等)\n保护和私有十分相似，但有一点不同，（保护）的成员在派生类（即子类）中是可访问的",
	"继承": "关键字: 继承  英文名称: 无\n调用格式: 继承 类名称\n为本类继承一个父类",
	"函数": "关键字: 函数 英文名称: def\n调用格式: 函数 [编译方式C][静态][虚函数] [返回值] [WINAPI] 函数名(参数列表)\n声明为一个函数，类似易语言的子程序，易只是用表格表示了。[]括号里面的是可选项\n当为类成员函数时, 可使用 [虚函数] 或 [静态] 关键字\n例如:\n函数 整型 add (整型 a, 整型 b)\n\t返回 a+b",
	"静态": "关键字: 静态  英文名称: static\n调用格式: 静态 变量/常量/结构/函数\n类成员加静态，可以变成全局，若.h文件中 函数加上静态，可解决重复实现的问题",
	"常量": "关键字: 常量  英文名称: const\n调用格式: 常量 常量名\n常量是固定值，在程序执行期间不会改变",
	"虚函数": "关键字: 虚函数  英文名称: virtua\n调用格式: 虚函数 函数名\n虚函数与虚基类，虚函数可以给出目标函数的定义，但该目标的具体指向在编译期可能无法确定",
	"重写": " 关键字: 重写  英文名称: override\n调用格式: 函数名() 重写\n函数重写是子类和父类之间的继承关系，需要子类和父类中的两个函数的函数原型完全相同",
	"WINAPI": "关键字: WINAPI  英文名称: stdcall\n调用格式: WINAPI 函数名\nWINAPI调用约定，被这个关键字修饰的函数，其参数都是从右向左通过堆栈传递的",
	"变整型": "基础数据类型: 变整型  英文名称: vint(int32, int64)\n本数据类型为基础类型，占用4/8字节",
	"返回": "关键字: 返回  英文名称: return\n调用格式: 返回 返回值\n用于函数返回值",
	"new": "关键字: new c++动态分配内存,当不使用时调用 delete 释放\n例如: 字符型 *数组1=new 字符型[100] 释放: delete []数组1\n例如: 文本型* 文本对象指针 = new 文本型; 释放: delete 文本对象指针",
	"delete": "关键字: delete c++释放new分配的内存\n例如: 字符型 *数组1=new 字符型[100] 释放: delete []数组1\n例如: 文本型* 文本对象指针 = new 文本型; 释放: delete 文本对象指针",
	"绑定信息": "*[绑定信息]\nIDE生成的UI绑定信息(UI变量,事件), 支持手动修改, 可收缩隐藏\n---格式---\n类 窗口类名称 集成 窗口类\n\t[绑定信息]\n\t\t[窗口组件类名称, 变量名, UI组件名称]\n\t\t\t[事件类型, 事件函数, 0:不带自身句柄, 1:带自身句柄]",
	"导出": "关键字: 导出 英文名称: export\n指示导出DLL函数，以供外部程序调用, 对应C++: __declspec(dllexport)\n例如: 函数 编译C 导出 整型 WINAPI _add(整型 a, 整型 b)",
	"编译方式C": "关键字: 编译方式C 英文名: externC\n指示按C语言方式编译, 对应C++: extern \"C\"",
	"DLL导入表": "关键字: DLL导入表\nDLL导入表, 降低动态调用DLL难度, 指定DLL名称, 编译方式C, 可指定回调函数, 动态修改DLL路径\n格式:[DLL名称, 编译方式C, 回调函数]\n\t函数 整型 DLL_add(整型 参数1, 整型 参数2) //add 原始名称, 如果没有那么就没有别名\n\t函数 整型 DLL_add相加(整型 参数1, 整型 参数2) : add相加",
	"禁引用": "关键字: 禁引用 英文名:noref\n调用格式: 参数类型 禁引用 参数名\n非基本数据类型(结构体，类)默认引用，在调用函数时被(默认)引用的参数会被函数内修改的可能，此时就会用到禁引用",
	"#宏定义": "关键字: #宏定义  英文名:#define\n调用格式: #宏定义  宏名称   宏值\n在代码编译时, 会将宏替换为实际的值, 值可以是数字,字符串等任意类型\n例如: #宏定义   窗口宽度   500",
	"#外部宏": "关键字: #外部宏   英文名：#extern_macro\n调用格式: #外部宏 外部宏名称 <注意：在代码的外部去调用，别在函数和类中调用>\n声明一个已存在C/C++中的宏, 以便炫语言IDE识别并调用。\n例如: #外部宏 HMENU    //表示在C/C++中已存在的宏, 系统的菜单句柄",
	"#外部类型": "关键字: #外部类型   英文名：#extern_type\n调用格式: #外部类型 外部已存在的类型名称 <注意：在代码的外部去调用，别在函数和类中调用>\n声明一个已存在外部C/C++中的类型，以便炫语言IDE识别并调用。\n例如: #外部类型 DWORD  //表示已存在外部代码或库中的DWORD类型",
	"#头文件": "关键字: #头文件   英文名：#include\n调用格式:\n#头文件 <系统文件名称.h>   //IDE不会解析文件内容\n#头文件 \"本地头文件名称.h\"  //IDE会解析文件内容\n<注意：在代码的外部去调用，别在函数和类中调用>\n例如: #头文件 <d2d1.h> 或者 #头文件 “d2d1.h”",
	"#库文件": "关键字: #库文件   英文名：#lib\n调用格式: #库文件 \"本地库文件名称.lib\" <注意：在代码的外部去调用，别在函数和类中调用>\n例如: #库文件 “d2d1.lib”",
	"#嵌入代码": "关键字: #嵌入代码\n备注:嵌入C++代码到炫语言中\n例如:\n#嵌入代码\nint  var = 10;\n#嵌入代码结束",
	"#嵌入代码结束": "关键字: #嵌入代码\n备注:嵌入C++代码到炫语言中\n例如:\n#嵌入代码\nint  var = 10;\n#嵌入代码结束",
	"#嵌入行": "关键字: #嵌入行\n嵌入一行C++代码到炫语言中\n例如:\n#嵌入行  int  var = 10;"
}