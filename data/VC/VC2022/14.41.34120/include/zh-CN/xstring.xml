<doc>
  <members>
    <member name="T:std.basic_string`3">
      <summary>A string is a container that provides functionality for manipulating sequences of characters. Operations such as comparison, concatenation, copying, and assignment are available.</summary>
      <typeparam name="_Elem">The data type of a single character to be stored in the string.</typeparam>
      <typeparam name="_Traits">Character traits for the template character type. Defaults to std::char_traits for the specified template character type.</typeparam>
      <typeparam name="_Alloc">The type that represents the stored allocator object that encapsulates details about the string's allocation and deallocation of memory. Defaults to std::allocator for the specified template character type.</typeparam>
    </member>
    <member name="M:std.basic_string`3.#ctor(reference.const._Alloc) noexcept">
      <summary>Creates an empty string that will use the specified allocator to manage memory.</summary>
      <param name="_Al">The allocator to use to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(const._Alloc) noexcept">
      <summary>Creates an empty string that will use the specified allocator to manage memory.</summary>
      <param name="_Al">The allocator to use to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(const._Alloc) noexcept constexpr">
      <summary>Creates an empty string that will use the specified allocator to manage memory.</summary>
      <param name="_Al">The allocator to use to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(reference.const._Alloc) noexcept constexpr">
      <summary>Creates an empty string that will use the specified allocator to manage memory.</summary>
      <param name="_Al">The allocator to use to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(const._Elem)">
      <summary>Creates and initializes a string to a copy of the contents of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(const._Elem) constexpr">
      <summary>Creates and initializes a string to a copy of the contents of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(pointer.const._Elem)">
      <summary>Creates and initializes a string to a copy of the contents of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(pointer.const._Elem) constexpr">
      <summary>Creates and initializes a string to a copy of the contents of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(const.std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Creates and initializes a string to a copy of the contents of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(reference.const.std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Creates and initializes a string to a copy of the contents of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(const.std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Creates and initializes a string to a copy of the contents of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(reference.const.std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Creates and initializes a string to a copy of the contents of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(std.basic_string{_Elem,_Traits,_Alloc}) noexcept">
      <summary>Creates and initializes a string to a copy of the contents of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(std.basic_string{_Elem,_Traits,_Alloc}) noexcept constexpr">
      <summary>Creates and initializes a string to a copy of the contents of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(rvalue.std.basic_string{_Elem,_Traits,_Alloc}) noexcept">
      <summary>Creates a new string and moves the contents of another string into it.</summary>
      <param name="_Right">A string whose contents will move into the new string instance.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(rvalue.std.basic_string{_Elem,_Traits,_Alloc}) noexcept constexpr">
      <summary>Creates a new string and moves the contents of another string into it.</summary>
      <param name="_Right">A string whose contents will move into the new string instance.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem)">
      <summary>Creates a string of a specified length with all characters initialized to a specified value.</summary>
      <param name="_Count">The length of the string to create.</param>
      <param name="_Ch">The character to fill the string with.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem) constexpr">
      <summary>Creates a string of a specified length with all characters initialized to a specified value.</summary>
      <param name="_Count">The length of the string to create.</param>
      <param name="_Ch">The character to fill the string with.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(std.initializer_list{_Elem},const._Alloc)">
      <summary>Creates and initializes a string to a copy of the contents of the initializer list.</summary>
      <param name="_Ilist">The list of characters to copy into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(std.initializer_list{_Elem},reference.const._Alloc)">
      <summary>Creates and initializes a string to a copy of the contents of the initializer list.</summary>
      <param name="_Ilist">The list of characters to copy into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(std.initializer_list{_Elem},const._Alloc) constexpr">
      <summary>Creates and initializes a string to a copy of the contents of the initializer list.</summary>
      <param name="_Ilist">The list of characters to copy into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(std.initializer_list{_Elem},reference.const._Alloc) constexpr">
      <summary>Creates and initializes a string to a copy of the contents of the initializer list.</summary>
      <param name="_Ilist">The list of characters to copy into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(const._Elem,const._Alloc)">
      <summary>Creates and initializes a string to a copy of the contents of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(const._Elem,const._Alloc) constexpr">
      <summary>Creates and initializes a string to a copy of the contents of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(const._Elem,const._Alloc)">
      <summary>Creates and initializes a string to a copy of the contents of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(pointer.const._Elem,reference.const._Alloc)">
      <summary>Creates and initializes a string to a copy of the contents of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(pointer.const._Elem,reference.const._Alloc) constexpr">
      <summary>Creates and initializes a string to a copy of the contents of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(pointer.const._Elem,reference.const._Alloc)">
      <summary>Creates and initializes a string to a copy of the contents of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Creates and initializes a string to a copy of a subset of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Creates and initializes a string to a copy of a subset of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Creates and initializes a string to a copy of a subset of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Creates and initializes a string to a copy of a subset of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(const._StringViewIsh,const._Alloc)">
      <summary>Creates and initializes a string to a copy of the characters represented by a string that can be interpreted as a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">A string view whose contents will be copied into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(reference.const._StringViewIsh,reference.const._Alloc)">
      <summary>Creates and initializes a string to a copy of the characters represented by a string that can be interpreted as a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">A string view whose contents will be copied into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(const._StringViewIsh,const._Alloc) constexpr">
      <summary>Creates and initializes a string to a copy of the characters represented by a string that can be interpreted as a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">A string view whose contents will be copied into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(reference.const._StringViewIsh,reference.const._Alloc) constexpr">
      <summary>Creates and initializes a string to a copy of the characters represented by a string that can be interpreted as a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">A string view whose contents will be copied into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(const.std.basic_string{_Elem,_Traits,_Alloc},const._Alloc)">
      <summary>Creates and initializes a string to a copy of the contents of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(reference.const.std.basic_string{_Elem,_Traits,_Alloc},reference.const._Alloc)">
      <summary>Creates and initializes a string to a copy of the contents of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(const.std.basic_string{_Elem,_Traits,_Alloc},const._Alloc) constexpr">
      <summary>Creates and initializes a string to a copy of the contents of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(reference.const.std.basic_string{_Elem,_Traits,_Alloc},reference.const._Alloc) constexpr">
      <summary>Creates and initializes a string to a copy of the contents of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(std.basic_string{_Elem,_Traits,_Alloc},const._Alloc)">
      <summary>Creates and initializes a string to a copy of the contents of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(std.basic_string{_Elem,_Traits,_Alloc},const._Alloc) constexpr">
      <summary>Creates and initializes a string to a copy of the contents of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(rvalue.std.basic_string{_Elem,_Traits,_Alloc},reference.const._Alloc)">
      <summary>Creates a new string and moves the contents of another string into it.</summary>
      <param name="_Right">A string whose contents will move into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(rvalue.std.basic_string{_Elem,_Traits,_Alloc},reference.const._Alloc) constexpr">
      <summary>Creates a new string and moves the contents of another string into it.</summary>
      <param name="_Right">A string whose contents will move into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem,reference.const._Alloc)">
      <summary>Creates a string of a specified length with all characters initialized to a specified value.</summary>
      <param name="_Count">The length of the string to create.</param>
      <param name="_Ch">The character to fill the string with.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem,reference.const._Alloc) constexpr">
      <summary>Creates a string of a specified length with all characters initialized to a specified value.</summary>
      <param name="_Count">The length of the string to create.</param>
      <param name="_Ch">The character to fill the string with.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem,reference.const._Alloc)">
      <summary>Creates a string of a specified length with all characters initialized to a specified value.</summary>
      <param name="_Count">The length of the string to create.</param>
      <param name="_Ch">The character to fill the string with.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem,const._Alloc)">
      <summary>Creates a string of a specified length with all characters initialized to a specified value.</summary>
      <param name="_Count">The length of the string to create.</param>
      <param name="_Ch">The character to fill the string with.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem,const._Alloc) constexpr">
      <summary>Creates a string of a specified length with all characters initialized to a specified value.</summary>
      <param name="_Count">The length of the string to create.</param>
      <param name="_Ch">The character to fill the string with.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem,const._Alloc)">
      <summary>Creates a string of a specified length with all characters initialized to a specified value.</summary>
      <param name="_Count">The length of the string to create.</param>
      <param name="_Ch">The character to fill the string with.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(_Iter,_Iter,const._Alloc)">
      <summary>Creates and initializes a string to a copy of the contents of the range described by character iterators.</summary>
      <typeparam name="_Iter">Input iterator.</typeparam>
      <param name="_First">The location of the first character in the range to be copied.</param>
      <param name="_Last">The location where the copy should stop. This character is not included in the copy.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(_Iter,_Iter,reference.const._Alloc)">
      <summary>Creates and initializes a string to a copy of the contents of the range described by character iterators.</summary>
      <typeparam name="_Iter">Input iterator.</typeparam>
      <param name="_First">The location of the first character in the range to be copied.</param>
      <param name="_Last">An iterator that refers to the first character beyond the end of the range.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(_Iter,_Iter,const._Alloc) constexpr">
      <summary>Creates and initializes a string to a copy of the contents of the range described by character iterators.</summary>
      <typeparam name="_Iter">Input iterator.</typeparam>
      <param name="_First">The location of the first character in the range to be copied.</param>
      <param name="_Last">The location where the copy should stop. This character is not included in the copy.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(_Iter,_Iter,reference.const._Alloc) constexpr">
      <summary>Creates and initializes a string to a copy of the contents of the range described by character iterators.</summary>
      <typeparam name="_Iter">Input iterator.</typeparam>
      <param name="_First">The location of the first character in the range to be copied.</param>
      <param name="_Last">An iterator that refers to the first character beyond the end of the range.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Alloc)">
      <summary>Creates and initializes a string to a copy of a subset of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Alloc) constexpr">
      <summary>Creates and initializes a string to a copy of a subset of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Alloc)">
      <summary>Creates and initializes a string to a copy of a subset of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._Alloc)">
      <summary>Creates and initializes a string to a copy of a subset of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._Alloc) constexpr">
      <summary>Creates and initializes a string to a copy of a subset of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._Alloc)">
      <summary>Creates and initializes a string to a copy of a subset of a null-terminated string.</summary>
      <param name="_Ptr">A null-terminated string whose characters will be copied into the new string instance.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._Alloc)">
      <summary>Creates and initializes a string by copying a subset of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
      <param name="_Roff">The position of the first character to copy from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._Alloc) constexpr">
      <summary>Creates and initializes a string by copying a subset of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
      <param name="_Roff">The position of the first character to copy from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Alloc)">
      <summary>Creates and initializes a string by copying a subset of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
      <param name="_Roff">The position of the first character to copy from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Alloc) constexpr">
      <summary>Creates and initializes a string by copying a subset of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
      <param name="_Roff">The position of the first character to copy from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Alloc) constexpr">
      <summary>Creates and initializes a string to a copy of a subset of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
      <param name="_Roff">The position of the first character to copy from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(rvalue.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._Alloc) constexpr">
      <summary>Creates a new string and moves the contents of another string into it.</summary>
      <param name="_Right">A string whose contents will move into the new string instance.</param>
      <param name="_Roff">The position of the first character to move from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``1(std.from_range_t,_Rng,const._Alloc) constexpr">
      <summary>Creates and initializes a string by copying the contents of a range into it.</summary>
      <typeparam name="_Rng">Container range.</typeparam>
      <param name="_Range">A range whose contents will be copied into the new string instance.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``1(std.from_range_t,rvalue._Rng,reference.const._Alloc) constexpr">
      <summary>Creates and initializes a string by copying the contents of a range into it.</summary>
      <typeparam name="_Rng">Container range.</typeparam>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(const._Ty,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Alloc)">
      <summary>Creates and initializes a string to a copy of a subset of another string.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
      <param name="_Roff">The position of the first character to copy from the source string.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor``2(const._Ty,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Alloc) constexpr">
      <summary>Creates and initializes a string to a copy of a subset of another string.</summary>
      <typeparam name="_Ty">A type that is convertible to a string view.</typeparam>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
      <param name="_Roff">The position of the first character to copy from the source string.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._Alloc) constexpr">
      <summary>Creates and initializes a string by copying a subset of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
      <param name="_Roff">The position of the first character to copy from the source string.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Alloc)">
      <summary>Creates and initializes a string by copying a subset of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
      <param name="_Roff">The position of the first character to copy from the source string.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Alloc) constexpr">
      <summary>Creates and initializes a string by copying a subset of the contents of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
      <param name="_Roff">The position of the first character to copy from the source string.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Alloc) constexpr">
      <summary>Creates and initializes a string to a copy of a subset of the contents of another string.</summary>
      <param name="_Right">A string whose contents will be copied into the new string instance.</param>
      <param name="_Roff">The position of the first character to copy from the source string.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor(rvalue.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._Alloc) constexpr">
      <summary>Creates and initializes a string and moves the contents of another string into it.</summary>
      <param name="_Right">A string whose contents will move into the new string instance.</param>
      <param name="_Roff">The position of the first character to move from the source string.</param>
      <param name="_Count">The number of characters to move from the source string.</param>
      <param name="_Al">An allocator used to manage the string's memory.</param>
    </member>
    <member name="M:std.basic_string`3.#ctor">
      <summary>Creates an empty string.</summary>
    </member>
    <member name="M:std.basic_string`3.#ctor constexpr">
      <summary>Creates an empty string.</summary>
    </member>
    <member name="M:std.basic_string`3.~basic_string noexcept">
      <summary>Deallocates storage for the string.</summary>
    </member>
    <member name="M:std.basic_string`3.~basic_string noexcept constexpr">
      <summary>Deallocates storage for the string.</summary>
    </member>
    <member name="M:std.basic_string`3.append(std.initializer_list{_Elem})">
      <summary>Appends the contents of an initializer list to the end of the string.</summary>
      <param name="_Ilist">The list of characters to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(std.initializer_list{_Elem}) constexpr">
      <summary>Appends the contents of an initializer list to the end of the string.</summary>
      <param name="_Ilist">The list of characters to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(const._Elem)">
      <summary>Appends the contents of a null-terminated string to the end of the string.</summary>
      <param name="_Ptr">The null-terminated string to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(const._Elem) constexpr">
      <summary>Appends the contents of a null-terminated string to the end of the string.</summary>
      <param name="_Ptr">The null-terminated string to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(pointer.const._Elem)">
      <summary>Appends the contents of a null-terminated string to the end of the string.</summary>
      <param name="_Ptr">The null-terminated string to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(pointer.const._Elem) constexpr">
      <summary>Appends the contents of a null-terminated string to the end of the string.</summary>
      <param name="_Ptr">The null-terminated string to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append``2(const._StringViewIsh)">
      <summary>Appends the contents of a string view to the end of the string.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append``2(reference.const._StringViewIsh)">
      <summary>Appends the contents of a string view to the end of the string.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append``2(const._StringViewIsh) constexpr">
      <summary>Appends the contents of a string view to the end of the string.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append``2(reference.const._StringViewIsh) constexpr">
      <summary>Appends the contents of a string view to the end of the string.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(const.std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Appends the contents of another string to the end of the string.</summary>
      <param name="_Right">The string to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(reference.const.std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Appends the contents of another string to the end of the string.</summary>
      <param name="_Right">The string to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(const.std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Appends the contents of another string to the end of the string.</summary>
      <param name="_Right">The string to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(reference.const.std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Appends the contents of another string to the end of the string.</summary>
      <param name="_Right">The string to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem)">
      <summary>Appends a specified number of characters to the end of the string.</summary>
      <param name="_Count">The number of characters to append.</param>
      <param name="_Ch">The character to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem) constexpr">
      <summary>Appends a specified number of characters to the end of the string.</summary>
      <param name="_Count">The number of characters to append.</param>
      <param name="_Ch">The character to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append``2(_Iter,_Iter)">
      <summary>Appends characters described by an iterator range to the end of the string.</summary>
      <typeparam name="_Iter">Input iterator.</typeparam>
      <param name="_First">An iterator to the first character in the range to copy from.</param>
      <param name="_Last">An iterator that refers to the first character beyond the end of the range.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append``2(_Iter,_Iter) constexpr">
      <summary>Appends characters described by an iterator range to the end of the string.</summary>
      <typeparam name="_Iter">Input iterator.</typeparam>
      <param name="_First">An iterator to the first character in the range to copy from.</param>
      <param name="_Last">An iterator that refers to the first character beyond the end of the range.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Appends a specified number of characters from a null-terminated string to the end of the string.</summary>
      <param name="_Ptr">The null-terminated string to append.</param>
      <param name="_Count">The number of characters to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Appends a specified number of characters from a null-terminated string to the end of the string.</summary>
      <param name="_Ptr">The null-terminated string to append.</param>
      <param name="_Count">The number of characters to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Appends a specified number of characters from a null-terminated string to the end of the string.</summary>
      <param name="_Ptr">The null-terminated string to append.</param>
      <param name="_Count">The number of characters to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Appends a specified number of characters from a null-terminated string to the end of the string.</summary>
      <param name="_Ptr">The null-terminated string to append.</param>
      <param name="_Count">The number of characters to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append``2(reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Appends a range of characters from a string view to the end of the string.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to append.</param>
      <param name="_Roff">The offset of the first character to append from the source view.</param>
      <param name="_Count">The number of characters to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append``2(reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Appends a range of characters from a string view to the end of the string.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to append.</param>
      <param name="_Roff">The offset of the first character to append from the source view.</param>
      <param name="_Count">The number of characters to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append``2(const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Appends a range of characters from a string view to the end of the string.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to append.</param>
      <param name="_Roff">The offset of the first character to append from the source view.</param>
      <param name="_Count">The number of characters to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append``2(const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Appends a range of characters from a string view to the end of the string.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to append.</param>
      <param name="_Roff">The offset of the first character to append from the source view.</param>
      <param name="_Count">The number of characters to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Appends a range of characters from a string to the end of the string.</summary>
      <param name="_Right">The string to append.</param>
      <param name="_Roff">The offset of the first character to append from the source string.</param>
      <param name="_Count">The number of characters to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Appends a range of characters from a string to the end of the string.</summary>
      <param name="_Right">The string to append.</param>
      <param name="_Roff">The offset of the first character to append from the source string.</param>
      <param name="_Count">The number of characters to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Appends a range of characters from a string to the end of the string.</summary>
      <param name="_Right">The string to append.</param>
      <param name="_Roff">The offset of the first character to append from the source string.</param>
      <param name="_Count">The number of characters to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Appends a range of characters from a string to the end of the string.</summary>
      <param name="_Right">The string to append.</param>
      <param name="_Roff">The offset of the first character to append from the source string.</param>
      <param name="_Count">The number of characters to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append_range``1(_Rng) constexpr">
      <summary>Appends a range of characters to the end of the string.</summary>
      <typeparam name="_Rng">Container range.</typeparam>
      <param name="_Range">The range to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.append_range``1(rvalue._Rng) constexpr">
      <summary>Appends a range of characters to the end of the string.</summary>
      <typeparam name="_Rng">Container range.</typeparam>
      <param name="_Range">The range to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(std.initializer_list{_Elem})">
      <summary>Replaces the string managed by this object with a copy of the contents of an initializer list.</summary>
      <param name="_Ilist">The list whose contents will be copied into the current string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(std.initializer_list{_Elem}) constexpr">
      <summary>Replaces the string managed by this object with a copy of the contents of an initializer list.</summary>
      <param name="_Ilist">The list whose contents will be copied into the current string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(const._Elem)">
      <summary>Replaces the string managed by this object with a copy of the contents of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string whose contents will be copied into the current string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(const._Elem) constexpr">
      <summary>Replaces the string managed by this object with a copy of the contents of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string whose contents will be copied into the current string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(pointer.const._Elem)">
      <summary>Replaces the string managed by this object with a copy of the contents of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string whose contents will be copied into the current string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(pointer.const._Elem) constexpr">
      <summary>Replaces the string managed by this object with a copy of the contents of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string whose contents will be copied into the current string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign``2(const._StringViewIsh)">
      <summary>Replaces the string managed by this object with a copy of the contents of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view whose contents will be copied into the current string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign``2(reference.const._StringViewIsh)">
      <summary>Replaces the string managed by this object with a copy of the contents of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view whose contents will be copied into the current string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign``2(const._StringViewIsh) constexpr">
      <summary>Replaces the string managed by this object with a copy of the contents of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view whose contents will be copied into the current string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign``2(reference.const._StringViewIsh) constexpr">
      <summary>Replaces the string managed by this object with a copy of the contents of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view whose contents will be copied into the current string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(const.std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Replaces the string managed by this object with the contents of another string.</summary>
      <param name="_Right">The string whose contents will be copied into the current string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(reference.const.std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Replaces the string managed by this object with the contents of another string.</summary>
      <param name="_Right">The string whose contents will be copied into the current string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(const.std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Replaces the string managed by this object with the contents of another string.</summary>
      <param name="_Right">The string whose contents will be copied into the current string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(reference.const.std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Replaces the string managed by this object with the contents of another string.</summary>
      <param name="_Right">The string whose contents will be copied into the current string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Replaces the string managed by this object with a copy of the contents of another string.</summary>
      <param name="_Right">The string whose contents will be copied into the current string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Replaces the string managed by this object with a copy of the contents of another string.</summary>
      <param name="_Right">The string whose contents will be copied into the current string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(rvalue.std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Replaces the string managed by this object by moving the contents of another string.</summary>
      <param name="_Right">A string whose contents will move into the string instance.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(rvalue.std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Replaces the string managed by this object by moving the contents of another string.</summary>
      <param name="_Right">A string whose contents will move into the string instance.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem)">
      <summary>Replaces the string managed by this object with a specified number of characters, all initialized to a specified value.</summary>
      <param name="_Count">The new length of the string.</param>
      <param name="_Ch">The new value of all the characters in the string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem) constexpr">
      <summary>Replaces the string managed by this object with a specified number of characters, all initialized to a specified value.</summary>
      <param name="_Count">The new length of the string.</param>
      <param name="_Ch">The new value of all the characters in the string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign``2(_Iter,_Iter)">
      <summary>Replaces the string managed by this object with a copy of the contents of a range.</summary>
      <typeparam name="_Iter">Input iterator.</typeparam>
      <param name="_First">An iterator to the first character in the range to copy from.</param>
      <param name="_Last">An iterator that refers to the first character beyond the end of the range.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign``2(_Iter,_Iter) constexpr">
      <summary>Replaces the string managed by this object with a copy of the contents of a range.</summary>
      <typeparam name="_Iter">Input iterator.</typeparam>
      <param name="_First">An iterator to the first character in the range to copy from.</param>
      <param name="_Last">An iterator that refers to the first character beyond the end of the range.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Replaces the string managed by this object with a copy of a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to copy from.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Replaces the string managed by this object with a copy of a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to copy from.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Replaces the string managed by this object with a copy of a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to copy from.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Replaces the string managed by this object with a copy of a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to copy from.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign``2(reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Replaces the string managed by this object with a copy of a subset of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to copy from.</param>
      <param name="_Roff">The offset of the first character to copy from the source string view.</param>
      <param name="_Count">The number of characters to copy from the source string view.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign``2(reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Replaces the string managed by this object with a copy of a subset of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to copy from.</param>
      <param name="_Roff">The offset of the first character to copy from the source string view.</param>
      <param name="_Count">The number of characters to copy from the source string view.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign``2(const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Replaces the string managed by this object with a copy of a subset of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to copy from.</param>
      <param name="_Roff">The offset of the first character to copy from the source string view.</param>
      <param name="_Count">The number of characters to copy from the source string view.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign``2(const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Replaces the string managed by this object with a copy of a subset of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to copy from.</param>
      <param name="_Roff">The offset of the first character to copy from the source string view.</param>
      <param name="_Count">The number of characters to copy from the source string view.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Replaces the string managed by this object with a copy of a subset of another string.</summary>
      <param name="_Right">The string whose contents will be copied into the current string.</param>
      <param name="_Roff">The offset of the first character to copy from the source string view.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Replaces the string managed by this object with a copy of a subset of another string.</summary>
      <param name="_Right">The string whose contents will be copied into the current string.</param>
      <param name="_Roff">The offset of the first character to copy from the source string.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Replaces the string managed by this object with a copy of a subset of another string.</summary>
      <param name="_Right">The string to copy from.</param>
      <param name="_Roff">The offset of the first character to copy from the source string.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Replaces the string managed by this object with a copy of a subset of another string.</summary>
      <param name="_Right">The string to copy from.</param>
      <param name="_Roff">The offset of the first character to copy from the source string.</param>
      <param name="_Count">The number of characters to copy from the source string.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign_range``1(_Rng) constexpr">
      <summary>Replaces the string managed by this object with a copy of the contents of a range.</summary>
      <typeparam name="_Rng">Container range.</typeparam>
      <param name="_Range">The range to copy from.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.assign_range``1(rvalue._Rng) constexpr">
      <summary>Replaces the string managed by this object with a copy of the contents of a range.</summary>
      <typeparam name="_Rng">Container range.</typeparam>
      <param name="_Range">The range to move.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.at(std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Access the character at the specified position.</summary>
      <param name="_Off">The offset of the character to retrieve.</param>
      <returns>A reference to the character at the specified position.</returns>
    </member>
    <member name="M:std.basic_string`3.at(std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Access the character at the specified position.</summary>
      <param name="_Off">The offset of the character to retrieve.</param>
      <returns>A reference to the character at the specified position.</returns>
    </member>
    <member name="M:std.basic_string`3.at(std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Access the character at the specified position.</summary>
      <param name="_Off">The offset of the character to retrieve.</param>
      <returns>A const reference to the character at the specified position.</returns>
    </member>
    <member name="M:std.basic_string`3.at(std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Access the character at the specified position.</summary>
      <param name="_Off">The offset of the character to retrieve.</param>
      <returns>A cons reference to the character at the specified position.</returns>
    </member>
    <member name="M:std.basic_string`3.back noexcept">
      <summary>Gets a reference to the last character in a string.</summary>
      <returns>A reference to the last character in the string.</returns>
    </member>
    <member name="M:std.basic_string`3.back noexcept constexpr">
      <summary>Gets a reference to the last character in a string.</summary>
      <returns>A reference to the last character in the string.</returns>
    </member>
    <member name="M:std.basic_string`3.back const noexcept">
      <summary>Gets a const reference to the last character in a string.</summary>
      <returns>Const reference to the last character in a string.</returns>
    </member>
    <member name="M:std.basic_string`3.back const noexcept constexpr">
      <summary>Gets a const reference to the last character in a string.</summary>
      <returns>Const reference to the last character in a string.</returns>
    </member>
    <member name="M:std.basic_string`3.begin noexcept">
      <summary>Gets an iterator at the first character in the string.</summary>
      <returns>Iterator at the first character in the string.</returns>
    </member>
    <member name="M:std.basic_string`3.begin noexcept constexpr">
      <summary>Gets an iterator at the first character in the string.</summary>
      <returns>Iterator at the first character in the string.</returns>
    </member>
    <member name="M:std.basic_string`3.begin const noexcept">
      <summary>Gets a const iterator at the first character in the string.</summary>
      <returns>Const iterator at the first character in the string.</returns>
    </member>
    <member name="M:std.basic_string`3.begin const noexcept constexpr">
      <summary>Gets a const iterator at the first character in the string.</summary>
      <returns>Const iterator at the first character in the string.</returns>
    </member>
    <member name="M:std.basic_string`3.c_str const noexcept">
      <summary>Gets a const pointer to the first character of the underlying null-terminated string.</summary>
      <returns>Const pointer to the first character of the underlying null-terminated string.</returns>
    </member>
    <member name="M:std.basic_string`3.c_str const noexcept constexpr">
      <summary>Gets a const pointer to the first character of the underlying null-terminated string.</summary>
      <returns>Const pointer to the first character of the underlying null-terminated string.</returns>
    </member>
    <member name="M:std.basic_string`3.capacity const noexcept">
      <summary>Gets the maximum number of characters that the string can currently hold.</summary>
      <returns>Maximum number of characters that the string can currently hold.</returns>
    </member>
    <member name="M:std.basic_string`3.capacity const noexcept constexpr">
      <summary>Gets the maximum number of characters that the string can currently hold.</summary>
      <returns>Maximum number of characters that the string can currently hold.</returns>
    </member>
    <member name="M:std.basic_string`3.cbegin const noexcept">
      <summary>Gets a const iterator at the beginning of the string.</summary>
      <returns>Const iterator at the beginning of the string.</returns>
    </member>
    <member name="M:std.basic_string`3.cbegin const noexcept constexpr">
      <summary>Gets a const iterator at the beginning of the string.</summary>
      <returns>Const iterator at the beginning of the string.</returns>
    </member>
    <member name="M:std.basic_string`3.cend const noexcept">
      <summary>Gets a const iterator at the location after the last character in the string.</summary>
      <returns>Const iterator at the location after the last character in the string.</returns>
    </member>
    <member name="M:std.basic_string`3.cend const noexcept constexpr">
      <summary>Gets a const iterator at the location after the last character in the string.</summary>
      <returns>Const iterator at the location after the last character in the string.</returns>
    </member>
    <member name="M:std.basic_string`3.clear noexcept">
      <summary>Erases the contents of the string and invalidates iterators referring to its previous contents.</summary>
    </member>
    <member name="M:std.basic_string`3.clear noexcept constexpr">
      <summary>Erases the contents of the string and invalidates iterators referring to its previous contents.</summary>
    </member>
    <member name="M:std.basic_string`3.compare(const._Elem) const noexcept">
      <summary>Performs a case-sensitive comparison of the contents of the string with the contents of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(const._Elem) const noexcept constexpr">
      <summary>Performs a case-sensitive comparison of the contents of the string with the contents of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(pointer.const._Elem) const noexcept">
      <summary>Performs a case-sensitive comparison of the contents of the string with the contents of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(pointer.const._Elem) const noexcept constexpr">
      <summary>Performs a case-sensitive comparison of the contents of the string with the contents of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare``2(const._StringViewIsh) const">
      <summary>Performs a case-sensitive comparison of the contents of the string with the contents of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare``2(reference.const._StringViewIsh) const">
      <summary>Performs a case-sensitive comparison of the contents of the string with the contents of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare``2(const._StringViewIsh) const constexpr">
      <summary>Performs a case-sensitive comparison of the contents of the string with the contents of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare``2(reference.const._StringViewIsh) const constexpr">
      <summary>Performs a case-sensitive comparison of the contents of the string with the contents of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(reference.const.std.basic_string{_Elem,_Traits,_Alloc}) const noexcept">
      <summary>Performs a case-sensitive comparison of the contents of the string with the contents of another string.</summary>
      <param name="_Right">The string to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(const.std.basic_string{_Elem,_Traits,_Alloc}) const noexcept">
      <summary>Performs a case-sensitive comparison of the contents of the string with the contents of another string.</summary>
      <param name="_Right">The string to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(const.std.basic_string{_Elem,_Traits,_Alloc}) const noexcept constexpr">
      <summary>Performs a case-sensitive comparison of the contents of the string with the contents of another string.</summary>
      <param name="_Right">The string to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(reference.const.std.basic_string{_Elem,_Traits,_Alloc}) const noexcept constexpr">
      <summary>Performs a case-sensitive comparison of the contents of the string with the contents of another string.</summary>
      <param name="_Right">The string to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,pointer.const._Elem) const">
      <summary>Compares a subset of the string to the contents of another string.</summary>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Ptr">The null-terminated string to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,pointer.const._Elem) const constexpr">
      <summary>Compares a subset of the string to the contents of a null-terminated string.</summary>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Ptr">The null-terminated string to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Elem) const">
      <summary>Compares a subset of the string to the contents of a null-terminated string.</summary>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Ptr">The null-terminated string to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Elem) const constexpr">
      <summary>Compares a subset of the string to the contents of a null-terminated string.</summary>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Ptr">The null-terminated string to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._StringViewIsh) const">
      <summary>Compares a subset of the string to the contents of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Right">The string view to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._StringViewIsh) const constexpr">
      <summary>Compares a subset of the string to the contents of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Right">The string view to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._StringViewIsh) const">
      <summary>Compares a subset of the string to the contents of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Right">The string view to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._StringViewIsh) const constexpr">
      <summary>Compares a subset of the string to the contents of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Right">The string view to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const.std.basic_string{_Elem,_Traits,_Alloc}) const">
      <summary>Compares a subset of the string to another string.</summary>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Right">The string to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const.std.basic_string{_Elem,_Traits,_Alloc}) const">
      <summary>Compares a subset of the string to another string.</summary>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Right">The string to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const.std.basic_string{_Elem,_Traits,_Alloc}) const constexpr">
      <summary>Compares a subset of the string to another string.</summary>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Right">The string to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const.std.basic_string{_Elem,_Traits,_Alloc}) const constexpr">
      <summary>Compares a subset of the string to another string.</summary>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Right">The string to compare.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Compares a subset of the string to a subset of a null-terminated string.</summary>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Ptr">The null-terminated string to compare.</param>
      <param name="_Count">The maximum number of characters from the input string to be compared.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Compares a subset of the string to a subset of a null-terminated string.</summary>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Ptr">The null-terminated string to compare.</param>
      <param name="_Count">The maximum number of characters from the input string to be compared.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Compares a subset of the string to a subset of a null-terminated string.</summary>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Ptr">The null-terminated string to compare.</param>
      <param name="_Count">The maximum number of characters from the input string to be compared.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Compares a subset of the string to a subset of a null-terminated string.</summary>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Ptr">The null-terminated string to compare.</param>
      <param name="_Count">The maximum number of characters from the input string to be compared.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Compares a subset of the string to a subset of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Right">The string view to compare.</param>
      <param name="_Roff">The index of the input string view where the comparison begins.</param>
      <param name="_Count">The maximum number of characters from the input string view to be compared.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Compares a subset of the string to a subset of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Right">The string view to compare.</param>
      <param name="_Roff">The index of the input string view where the comparison begins.</param>
      <param name="_Count">The maximum number of characters from the input string view to be compared.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Compares a subset of the string to a subset of another string.</summary>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Right">The string to compare.</param>
      <param name="_Roff">The index of the input string where the comparison begins.</param>
      <param name="_Count">The maximum number of characters from the input string to be compared.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Compares a subset of the string to a subset of another string.</summary>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Right">The string to compare.</param>
      <param name="_Roff">The index of the input string where the comparison begins.</param>
      <param name="_Count">The maximum number of characters from the input string to be compared.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Compares a subset of the string to a subset of string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Right">The string view to compare.</param>
      <param name="_Roff">The index of the input string view where the comparison begins.</param>
      <param name="_Count">The maximum number of characters from the input string view to be compared.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Compares a subset of the string to a subset of string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Right">The string view to compare.</param>
      <param name="_Roff">The index of the input string view where the comparison begins.</param>
      <param name="_Count">The maximum number of characters from the input string view to be compared.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Compares a subset of the string to a subset of another string.</summary>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Right">The string to compare.</param>
      <param name="_Roff">The index of the input string where the comparison begins.</param>
      <param name="_Count">The maximum number of characters from the input string to be compared.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.compare(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Compares a subset of the string to a subset of another string.</summary>
      <param name="_Off">The index of the current string where the comparison begins.</param>
      <param name="_Nx">The number of characters from the current string to be compared.</param>
      <param name="_Right">The string to compare.</param>
      <param name="_Roff">The index of the input string where the comparison begins.</param>
      <param name="_Count">The maximum number of characters from the input string to be compared.</param>
      <returns>A negative value if the string is lesser, zero if the two are equal, or a positive value if the string is greater.</returns>
    </member>
    <member name="M:std.basic_string`3.contains(_Elem) const noexcept constexpr">
      <summary>Checks if the string contains another string.</summary>
      <param name="_Right">The string to search for.</param>
      <returns>True if the string contains with the string, false otherwise.</returns>
    </member>
    <member name="M:std.basic_string`3.contains(const._Elem) const noexcept constexpr">
      <summary>Checks if the string contains a null-terminated string.</summary>
      <param name="_Right">The null-terminated string to search for.</param>
      <returns>True if the string contains with the null-terminated string, false otherwise.</returns>
    </member>
    <member name="M:std.basic_string`3.contains(pointer.const._Elem) const noexcept constexpr">
      <summary>Checks if the string contains a null-terminated string.</summary>
      <param name="_Right">The null-terminated string to search for.</param>
      <returns>True if the string contains with the null-terminated string, false otherwise.</returns>
    </member>
    <member name="M:std.basic_string`3.contains(std.basic_string_view{_Elem,_Traits}) const noexcept constexpr">
      <summary>Checks if the string contains a string view.</summary>
      <param name="_Right">The string view to search for.</param>
      <returns>True if the string contains with the string view, false otherwise.</returns>
    </member>
    <member name="M:std.basic_string`3.copy(_Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Copies a subset of the string.</summary>
      <param name="_Ptr">The destination of the copy.</param>
      <param name="_Count">The number of characters to be copied, at most, from the source string.</param>
      <param name="_Off">The beginning position in the source string from which copies are to be made.</param>
      <returns>The number of characters copied.</returns>
    </member>
    <member name="M:std.basic_string`3.copy(_Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Copies a subset of the string.</summary>
      <param name="_Ptr">The destination of the copy.</param>
      <param name="_Count">The number of characters to be copied, at most, from the source string.</param>
      <param name="_Off">The beginning position in the source string from which copies are to be made.</param>
      <returns>The number of characters copied.</returns>
    </member>
    <member name="M:std.basic_string`3.copy(pointer._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Copies a subset of the string.</summary>
      <param name="_Ptr">The destination of the copy.</param>
      <param name="_Count">The number of characters to be copied, at most, from the source string.</param>
      <param name="_Off">The beginning position in the source string from which copies are to be made.</param>
      <returns>The number of characters copied.</returns>
    </member>
    <member name="M:std.basic_string`3.copy(pointer._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Copies a subset of the string.</summary>
      <param name="_Ptr">The destination of the copy.</param>
      <param name="_Count">The number of characters to be copied, at most, from the source string.</param>
      <param name="_Off">The beginning position in the source string from which copies are to be made.</param>
      <returns>The number of characters copied.</returns>
    </member>
    <member name="M:std.basic_string`3.crbegin const noexcept">
      <summary>Gets a const reverse iterator at the beginning of the string.</summary>
      <returns>Const reverse iterator at the beginning of the string.</returns>
    </member>
    <member name="M:std.basic_string`3.crbegin const noexcept constexpr">
      <summary>Gets a const reverse iterator at the beginning of the string.</summary>
      <returns>Const reverse iterator at the beginning of the string.</returns>
    </member>
    <member name="M:std.basic_string`3.crend const noexcept">
      <summary>Gets a const reverse iterator at the end of the string.</summary>
      <returns>Const reverse iterator at the end of the string.</returns>
    </member>
    <member name="M:std.basic_string`3.crend const noexcept constexpr">
      <summary>Gets a const reverse iterator at the end of the string.</summary>
      <returns>Const reverse iterator at the end of the string.</returns>
    </member>
    <member name="M:std.basic_string`3.data noexcept">
      <summary>Gets a pointer to the first character of the underlying null-terminated string.</summary>
      <returns>Pointer to the first character of the underlying null-terminated string.</returns>
    </member>
    <member name="M:std.basic_string`3.data noexcept constexpr">
      <summary>Gets a pointer to the first character of the underlying null-terminated string.</summary>
      <returns>Pointer to the first character of the underlying null-terminated string.</returns>
    </member>
    <member name="M:std.basic_string`3.data const noexcept">
      <summary>Gets a pointer to the first character of the underlying null-terminated string.</summary>
      <returns>Pointer to the first character of the underlying null-terminated string.</returns>
    </member>
    <member name="M:std.basic_string`3.data const noexcept constexpr">
      <summary>Gets a pointer to the first character of the underlying null-terminated string.</summary>
      <returns>Pointer to the first character of the underlying null-terminated string.</returns>
    </member>
    <member name="M:std.basic_string`3.empty const noexcept">
      <summary>Gets a value indicating whether the string is empty.</summary>
      <returns>True if the string object contains no characters, false if it has at least one character.</returns>
    </member>
    <member name="M:std.basic_string`3.empty const noexcept constexpr">
      <summary>Gets a value indicating whether the string is empty.</summary>
      <returns>True if the string object contains no characters, false if it has at least one character.</returns>
    </member>
    <member name="M:std.basic_string`3.end noexcept">
      <summary>Gets an iterator at the location after the last character in the string.</summary>
      <returns>Iterator at the location after the last character in the string.</returns>
    </member>
    <member name="M:std.basic_string`3.end noexcept constexpr">
      <summary>Gets an iterator at the location after the last character in the string.</summary>
      <returns>Iterator at the location after the last character in the string.</returns>
    </member>
    <member name="M:std.basic_string`3.end const noexcept">
      <summary>Gets an iterator at the location after the last character in the string.</summary>
      <returns>A const iterator at the location after the last character in the string.</returns>
    </member>
    <member name="M:std.basic_string`3.end const noexcept constexpr">
      <summary>Gets a const iterator at the location after the last character in the string.</summary>
      <returns>Const iterator at the location after the last character in the string.</returns>
    </member>
    <member name="M:std.basic_string`3.ends_with(_Elem) const noexcept constexpr">
      <summary>Checks whether the string ends with the specified suffix.</summary>
      <param name="_Right">The suffix to look for.</param>
      <returns>True if the string ends with the specified suffix, false otherwise.</returns>
    </member>
    <member name="M:std.basic_string`3.ends_with(const._Elem) const noexcept constexpr">
      <summary>Checks whether the string ends with the specified suffix.</summary>
      <param name="_Right">The suffix to look for.</param>
      <returns>True if the string ends with the specified suffix, false otherwise.</returns>
    </member>
    <member name="M:std.basic_string`3.ends_with(pointer.const._Elem) const noexcept constexpr">
      <summary>Checks whether the string ends with the specified suffix.</summary>
      <param name="_Right">The suffix to look for.</param>
      <returns>True if the string ends with the specified suffix, false otherwise.</returns>
    </member>
    <member name="M:std.basic_string`3.ends_with(std.basic_string_view{_Elem,_Traits}) const noexcept constexpr">
      <summary>Checks whether the string ends with the specified suffix.</summary>
      <param name="_Right">The suffix to look for.</param>
      <returns>True if the string ends with the specified suffix, false otherwise.</returns>
    </member>
    <member name="M:std.basic_string`3.erase(std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Removes characters from the string starting at the specified position.</summary>
      <param name="_Off">The index of the first character in the string to be removed.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.erase(std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Removes characters from the string starting at the specified position.</summary>
      <param name="_Off">The index of the first character in the string to be removed.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.erase(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator) noexcept">
      <summary>Removes characters from the string starting at the specified iterator.</summary>
      <param name="_Where">A const iterator at the first character in the range to be removed.</param>
      <returns>An iterator at the first character after the removed characters.</returns>
    </member>
    <member name="M:std.basic_string`3.erase(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator) noexcept constexpr">
      <summary>Removes characters from the string starting at the specified iterator.</summary>
      <param name="_Where">A const iterator at the first character in the range to be removed.</param>
      <returns>An iterator at the first character after the removed characters.</returns>
    </member>
    <member name="M:std.basic_string`3.erase(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator) noexcept">
      <summary>Removes characters from the string within a specified range.</summary>
      <param name="_First">A const iterator at the first character in the range to be removed.</param>
      <param name="_Last">A const iterator at the last character in the range to be removed.</param>
      <returns>An iterator at the first character after the removed characters.</returns>
    </member>
    <member name="M:std.basic_string`3.erase(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator) noexcept constexpr">
      <summary>Removes characters from the string within a specified range.</summary>
      <param name="_First">A const iterator at the first character in the range to be removed.</param>
      <param name="_Last">A const iterator at the last character in the range to be removed.</param>
      <returns>An iterator at the first character after the erased characters.</returns>
    </member>
    <member name="M:std.basic_string`3.erase(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Removes characters from the string starting at the specified position.</summary>
      <param name="_Off">The index of the first character in the string to be removed.</param>
      <param name="_Count">The number of characters to remove.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.erase(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Removes characters from the string starting at the specified position.</summary>
      <param name="_Off">The index of the first character in the string to be removed.</param>
      <param name="_Count">The number of characters to remove.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.find(_Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for a character.</summary>
      <param name="_Ch">The character to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find(_Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for a character.</summary>
      <param name="_Ch">The character to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find``2(reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Searches for a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find``2(reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Searches for a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find``2(const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Searches for a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find``2(const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Searches for a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for a string.</summary>
      <param name="_Right">The string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for a string.</summary>
      <param name="_Right">The string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for a string.</summary>
      <param name="_Right">The string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for a string.</summary>
      <param name="_Right">The string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <param name="_Count">The index of the occurrence in the string, otherwise npos.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_not_of(_Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the first occurrence of a character that does not match the specified character.</summary>
      <param name="_Ch">The character to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_not_of(_Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the first occurrence of a character that does not match the specified character.</summary>
      <param name="_Ch">The character to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_not_of(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the first occurrence of a character that does not match any of the characters in a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_not_of(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the first occurrence of a character that does not match any of the characters in a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_not_of(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the first occurrence of a character that does not match any of the characters in a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_not_of(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the first occurrence of a character that does not match any of the characters in a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_not_of``2(reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Searches for the first occurrence of a character that does not match any of the characters in a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_not_of``2(reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Searches for the first occurrence of a character that does not match any of the characters in a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_not_of``2(const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Searches for the first occurrence of a character that does not match any of the characters in a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_not_of``2(const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Searches for the first occurrence of a character that does not match any of the characters in a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_not_of(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the first occurrence of a character that does not match any of the characters in a string.</summary>
      <param name="_Right">The string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_not_of(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the first occurrence of a character that does not match any of the characters in a string.</summary>
      <param name="_Right">The string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_not_of(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the first occurrence of a character that does not match any of the characters in a string.</summary>
      <param name="_Right">The string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_not_of(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the first occurrence of a character that does not match any of the characters in a string.</summary>
      <param name="_Right">The string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_not_of(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the first occurrence of a character that does not match any of the characters in a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_not_of(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the first occurrence of a character that does not match any of the characters in a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_not_of(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the first occurrence of a character that does not match any of the characters in a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_not_of(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the first occurrence of a character that does not match any of the characters in a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_of(_Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the first occurrence of a specified character.</summary>
      <param name="_Ch">The character to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_of(_Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the first occurrence of a specified character.</summary>
      <param name="_Ch">The character to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_of(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the first occurrence of any of the characters in a specified null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_of(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the first occurrence of any of the characters in a specified null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_of(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the first occurrence of any of the characters in a specified null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_of(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the first occurrence of any of the characters in a specified null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_of``2(reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Searches for the first occurrence of any of the characters in a specified string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_of``2(reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Searches for the first occurrence of any of the characters in a specified string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_of``2(const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Searches for the first occurrence of any of the characters in a specified string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_of``2(const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Searches for the first occurrence of any of the characters in a specified string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_of(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the first occurrence of any of the characters in a specified string.</summary>
      <param name="_Right">The string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_of(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the first occurrence of any of the characters in a specified string.</summary>
      <param name="_Right">The string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_of(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the first occurrence of any of the characters in a specified string.</summary>
      <param name="_Right">The string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_of(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the first occurrence of any of the characters in a specified string.</summary>
      <param name="_Right">The string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_of(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the first occurrence of any of the characters in a specified subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_of(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the first occurrence of any of the characters in a specified subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_of(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the first occurrence of any of the characters in a specified subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_first_of(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the first occurrence of any of the characters in a specified subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string with the characters to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_not_of(_Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the last occurrence of a character that does not match the specified character.</summary>
      <param name="_Ch">The character to search for.</param>
      <param name="_Off">The index of the position at which the search is to finish.</param>
      <returns>The index of the first character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_not_of(_Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the last occurrence of a character that does not match the specified character.</summary>
      <param name="_Ch">The character to search for.</param>
      <param name="_Off">The index of the position at which the search is to finish.</param>
      <returns>The index of the first character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_not_of(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the last occurrence of a character that does not match any of the characters in a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string with the characters to search for.</param>
      <param name="_Off">The index of the position at which the search is to finish.</param>
      <returns>The index of the first character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_not_of(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the last occurrence of a character that does not match any of the characters in a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The index of the position at which the search is to finish.</param>
      <returns>The index of the first character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_not_of(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the last occurrence of a character that does not match any of the characters in a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The index of the position at which the search is to finish.</param>
      <returns>The index of the first character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_not_of(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the last occurrence of a character that does not match any of the characters in a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The index of the position at which the search is to finish.</param>
      <returns>The index of the first character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_not_of``2(reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Searches for the last occurrence of a character that does not match any of the characters in a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to search for.</param>
      <param name="_Off">The index of the position at which the search is to finish.</param>
      <returns>The index of the first character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_not_of``2(reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Searches for the last occurrence of a character that does not match any of the characters in a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to search for.</param>
      <param name="_Off">The index of the position at which the search is to finish.</param>
      <returns>The index of the first character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_not_of``2(const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Searches for the last occurrence of a character that does not match any of the characters in a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to search for.</param>
      <param name="_Off">The index of the position at which the search is to finish.</param>
      <returns>The index of the first character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_not_of``2(const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Searches for the last occurrence of a character that does not match any of the characters in a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to search for.</param>
      <param name="_Off">The index of the position at which the search is to finish.</param>
      <returns>The index of the first character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_not_of(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the last occurrence of a character that does not match any of the characters in a string.</summary>
      <param name="_Right">The string to search for.</param>
      <param name="_Off">The index of the position at which the search is to finish.</param>
      <returns>The index of the first character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_not_of(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the last occurrence of a character that does not match any of the characters in a string.</summary>
      <param name="_Right">The string to search for.</param>
      <param name="_Off">The index of the position at which the search is to finish.</param>
      <returns>The index of the first character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_not_of(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the last occurrence of a character that does not match any of the characters in a string.</summary>
      <param name="_Right">The string to search for.</param>
      <param name="_Off">The index of the position at which the search is to finish.</param>
      <returns>The index of the first character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_not_of(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the last occurrence of a character that does not match any of the characters in a string.</summary>
      <param name="_Right">The string to search for.</param>
      <param name="_Off">The index of the position at which the search is to finish.</param>
      <returns>The index of the first character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_not_of(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the last occurrence of a character that does not match any of the characters in a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The index of the position at which the search is to finish.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the first character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_not_of(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the last occurrence of a character that does not match any of the characters in a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The index of the position at which the search is to finish.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the first character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_not_of(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the last occurrence of a character that does not match any of the characters in a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The index of the position at which the search is to finish.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the first character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_not_of(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the last occurrence of a character that does not match any of the characters in a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The index of the position at which the search is to finish.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the first character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_of(_Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the last occurrence of a character.</summary>
      <param name="_Ch">The character to search for.</param>
      <param name="_Off">The end position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_of(_Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the last occurrence of a character.</summary>
      <param name="_Ch">The character to search for.</param>
      <param name="_Off">The end position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_of(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the last occurrence of any of the characters in a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The end position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_of(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the last occurrence of any of the characters in a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The end position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_of(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the last occurrence of any of the characters in a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The end position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_of(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the last occurrence of any of the characters in a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The end position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_of``2(reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Searches for the last occurrence of any of the characters in a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to search for.</param>
      <param name="_Off">The end position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_of``2(reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Searches for the last occurrence of any of the characters in a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to search for.</param>
      <param name="_Off">The end position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_of``2(const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Searches for the last occurrence of any of the characters in a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to search for.</param>
      <param name="_Off">The end position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_of``2(const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Searches for the last occurrence of any of the characters in a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to search for.</param>
      <param name="_Off">The end position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_of(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the last occurrence of any of the characters in a string.</summary>
      <param name="_Right">The string to search for.</param>
      <param name="_Off">The end position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_of(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the last occurrence of any of the characters in a string.</summary>
      <param name="_Right">The string to search for.</param>
      <param name="_Off">The end position of the search.</param>
      <returns>The index of the last character of the substring searched for when successful, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_of(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the last occurrence of any of the characters in a string.</summary>
      <param name="_Right">The string to search for.</param>
      <param name="_Off">The end position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_of(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the last occurrence of any of the characters in a string.</summary>
      <param name="_Right">The string to search for.</param>
      <param name="_Off">The end position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_of(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the last occurrence of any of the characters in a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The end position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_of(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the last occurrence of any of the characters in a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The end position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_of(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Searches for the last occurrence of any of the characters in a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The end position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.find_last_of(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Searches for the last occurrence of any of the characters in a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The end position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.front noexcept">
      <summary>Gets a reference to the first character in the string.</summary>
      <returns>Reference to the first character of the string, which must be non-empty.</returns>
    </member>
    <member name="M:std.basic_string`3.front noexcept constexpr">
      <summary>Gets a reference to the first character in the string.</summary>
      <returns>Reference to the first character of the string, which must be non-empty.</returns>
    </member>
    <member name="M:std.basic_string`3.front const noexcept">
      <summary>Gets a reference to the first character in the string.</summary>
      <returns>A const reference to the first character of the string, which must be non-empty.</returns>
    </member>
    <member name="M:std.basic_string`3.front const noexcept constexpr">
      <summary>Gets a const reference to the first character in the string.</summary>
      <returns>A const reference to the first character of the string, which must be non-empty.</returns>
    </member>
    <member name="M:std.basic_string`3.get_allocator const noexcept">
      <summary>Gets a copy of the allocator object used to construct the string.</summary>
      <returns>Copy of the allocator object used to construct the string.</returns>
    </member>
    <member name="M:std.basic_string`3.get_allocator const noexcept constexpr">
      <summary>Gets a copy of the allocator object used to construct the string.</summary>
      <returns>Copy of the allocator object used to construct the string.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.size_type,pointer.const._Elem)">
      <summary>Inserts a copy of a null-terminated string into the string at the specified position.</summary>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Ptr">The null-terminated string to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.size_type,pointer.const._Elem) constexpr">
      <summary>Inserts a copy of a null-terminated string into the string at the specified position.</summary>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Ptr">The null-terminated string to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Elem)">
      <summary>Inserts a copy of a null-terminated string into the string at the specified position.</summary>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Ptr">The null-terminated string to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Elem) constexpr">
      <summary>Inserts a copy of a null-terminated string into the string at the specified position.</summary>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Ptr">The null-terminated string to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._StringViewIsh)">
      <summary>Inserts a copy of the contents of a string view into the string at the specified position.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Right">The string view to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._StringViewIsh) constexpr">
      <summary>Inserts a copy of the contents of a string view into the string at the specified position.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Right">The string view to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const.std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Inserts a copy of a string into the string at the specified position.</summary>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Right">The string to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const.std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Inserts a copy of a string into the string at the specified position.</summary>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Right">The string to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._StringViewIsh)">
      <summary>Inserts a copy of the contents of a string view into the string at the specified position.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Right">The string view to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._StringViewIsh) constexpr">
      <summary>Inserts a copy of the contents of a string view into the string at the specified position.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Right">The string view to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.size_type,const.std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Inserts a copy of a string into the string at the specified position.</summary>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Right">The string to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.size_type,const.std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Inserts a copy of a string into the string at the specified position.</summary>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Right">The string to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,_Elem)">
      <summary>Inserts a character into the string at the specified position.</summary>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_Ch">The character to insert.</param>
      <returns>An iterator at the start of the inserted character(s).</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,_Elem) constexpr">
      <summary>Inserts a character into the string at the specified position.</summary>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_Ch">The character to insert.</param>
      <returns>An iterator at the start of the inserted character(s).</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.initializer_list{_Elem})">
      <summary>Inserts a list of characters into the string at the specified position.</summary>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_Ilist">The list of characters to insert.</param>
      <returns>An iterator at the start of the inserted character(s).</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.initializer_list{_Elem}) constexpr">
      <summary>Inserts a list of characters into the string at the specified position.</summary>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_Ilist">The list of characters to insert.</param>
      <returns>An iterator at the start of the inserted character(s).</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem)">
      <summary>Inserts a character one or more times into the string at the specified position.</summary>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Count">The number of times the character will be inserted.</param>
      <param name="_Ch">The character to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem) constexpr">
      <summary>Inserts a character one or more times into the string at the specified position.</summary>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Count">The number of times the character will be inserted.</param>
      <param name="_Ch">The character to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.size_type,pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Inserts a subset of a null-terminated string into the string at the specified position.</summary>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Ptr">The null-terminated string to insert.</param>
      <param name="_Count">The number of characters from the null-terminated string to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.size_type,pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Inserts a subset of a null-terminated string into the string at the specified position.</summary>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Ptr">The null-terminated string to insert.</param>
      <param name="_Count">The number of characters from the null-terminated string to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Inserts a subset of a null-terminated string into the string at the specified position.</summary>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Ptr">The null-terminated string to insert.</param>
      <param name="_Count">The number of characters from the null-terminated string to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Inserts a subset of a null-terminated string into the string at the specified position.</summary>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Ptr">The null-terminated string to insert.</param>
      <param name="_Count">The number of characters from the null-terminated string to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem)">
      <summary>Inserts a character one or more times into the string at the specified position.</summary>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_Count">The number of times the character will be inserted.</param>
      <param name="_Ch">The character to insert.</param>
      <returns>An iterator at the start of the inserted value.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem) constexpr">
      <summary>Inserts a character one or more times into the string at the specified position.</summary>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_Count">The number of times the character will be inserted.</param>
      <param name="_Ch">The character to insert.</param>
      <returns>An iterator at the start of the inserted value.</returns>
    </member>
    <member name="M:std.basic_string`3.insert``2(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,_Iter,_Iter)">
      <summary>Inserts a copy of a range into the string at the specified position.</summary>
      <typeparam name="_Iter">Input iterator.</typeparam>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_First">An iterator to the first character to insert.</param>
      <param name="_Last">An iterator to the last character to insert.</param>
      <returns>An iterator at the start of the inserted value.</returns>
    </member>
    <member name="M:std.basic_string`3.insert``2(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,_Iter,_Iter) constexpr">
      <summary>Inserts a copy of a range into the string at the specified position.</summary>
      <typeparam name="_Iter">Input iterator.</typeparam>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_First">An iterator to the first character to insert.</param>
      <param name="_Last">An iterator to the last character to insert.</param>
      <returns>An iterator at the start of the inserted value.</returns>
    </member>
    <member name="M:std.basic_string`3.insert``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Inserts a copy of a subset of the contents of a string view into the string at the specified position.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Right">The string view to insert.</param>
      <param name="_Roff">The index of the string view to start copying at.</param>
      <param name="_Count">The number of characters in the string view to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Inserts a copy of a subset of the contents of a string view into the string at the specified position.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Right">The string view to insert.</param>
      <param name="_Roff">The index of the string view to start copying at.</param>
      <param name="_Count">The number of characters in the string view to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Inserts a copy of a subset of a string into the string at the specified position.</summary>
      <param name="_Off">The index at which to insert into the string.</param>
      <param name="_Right">The string to insert.</param>
      <param name="_Roff">The index of the string to start copying at.</param>
      <param name="_Count">The number of characters in the string view to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Inserts a copy of a subset of a string into the string at the specified position.</summary>
      <param name="_Off">The index at which to insert into the string.</param>
      <param name="_Right">The string to insert.</param>
      <param name="_Roff">The index of the string to start copying at.</param>
      <param name="_Count">The number of characters in the string to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Inserts a copy of a subset of the contents of a string view into the string at the specified position.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Right">The string view to insert.</param>
      <param name="_Roff">The index of the string view to start copying at.</param>
      <param name="_Count">The number of characters in the string view to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Inserts a copy of a subset of the contents of a string view into the string at the specified position.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index at which to insert.</param>
      <param name="_Right">The string view to insert.</param>
      <param name="_Roff">The index of the string view to start copying at.</param>
      <param name="_Count">The number of characters in the string view to insert.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.size_type,const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Inserts a copy of a subset of a string into the string at the specified position.</summary>
      <param name="_Off">The index at which to insert into the string.</param>
      <param name="_Right">The string to insert.</param>
      <param name="_Roff">The index of the string to start copying at.</param>
      <param name="_Count">The number of characters in the string to copy.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert(std.basic_string{_Elem,_Traits,_Alloc}.size_type,const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Inserts a copy of a subset of a string into the string at the specified position.</summary>
      <param name="_Off">The index at which to insert into the string.</param>
      <param name="_Right">The string to insert.</param>
      <param name="_Roff">The index of the string to start copying at.</param>
      <param name="_Count">The number of characters in the string to copy.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.insert_range``1(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,rvalue._Rng) constexpr">
      <summary>Inserts a range of characters into the string at the specified position.</summary>
      <typeparam name="_Rng">Container range.</typeparam>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_Range">The range of the insertion.</param>
      <returns>An iterator at the first inserted character.</returns>
    </member>
    <member name="M:std.basic_string`3.insert_range``1(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,_Rng) constexpr">
      <summary>Inserts a range of characters into the string at the specified position.</summary>
      <typeparam name="_Rng">Container range.</typeparam>
      <param name="_Where">A const iterator to the position to insert at.</param>
      <param name="_Range">The range of the insertion.</param>
      <returns>An iterator at the first inserted character.</returns>
    </member>
    <member name="M:std.basic_string`3.length const noexcept">
      <summary>Gets the current number of elements in a string.</summary>
      <returns>Current number of elements in a string.</returns>
    </member>
    <member name="M:std.basic_string`3.length const noexcept constexpr">
      <summary>Gets the current number of elements in a string.</summary>
      <returns>Current number of elements in a string.</returns>
    </member>
    <member name="M:std.basic_string`3.max_size const noexcept">
      <summary>Gets the maximum number of characters the string could contain.</summary>
      <returns>Maximum number of characters the string could contain.</returns>
    </member>
    <member name="M:std.basic_string`3.max_size const noexcept constexpr">
      <summary>Gets the maximum number of characters the string could contain.</summary>
      <returns>Maximum number of characters the string could contain.</returns>
    </member>
    <member name="M:std.basic_string`3.operator std.basic_string_view`2 const noexcept">
      <summary>Gets a string view for the string.</summary>
      <returns>View for the string.</returns>
    </member>
    <member name="M:std.basic_string`3.operator std.basic_string_view`2 const noexcept constexpr">
      <summary>Gets a string view for the string.</summary>
      <returns>View for the string.</returns>
    </member>
    <member name="M:std.basic_string`3.operator[](std.basic_string{_Elem,_Traits,_Alloc}.size_type) noexcept">
      <summary>Provides a reference to the character at the specified index in the string.</summary>
      <param name="_Off">The index of the position of the character to be referenced.</param>
      <returns>A reference to the character at the specified index in the string.</returns>
    </member>
    <member name="M:std.basic_string`3.operator[](std.basic_string{_Elem,_Traits,_Alloc}.size_type) noexcept constexpr">
      <summary>Provides a reference to the character at the specified index in the string.</summary>
      <param name="_Off">The index of the position of the character to be referenced.</param>
      <returns>A reference to the character at the specified index in the string.</returns>
    </member>
    <member name="M:std.basic_string`3.operator[](std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Provides a const reference to the character at the specified index in the string.</summary>
      <param name="_Off">The index of the position of the character to be referenced.</param>
      <returns>A const reference to the character at the specified index in the string.</returns>
    </member>
    <member name="M:std.basic_string`3.operator[](std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Provides a const reference to the character at the specified index in the string.</summary>
      <param name="_Off">The index of the position of the character to be referenced.</param>
      <returns>A const reference to the character at the specified index in the string.</returns>
    </member>
    <member name="M:std.basic_string`3.operator+=(_Elem)">
      <summary>Appends a character to the string.</summary>
      <param name="_Ch">The character to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator+=(_Elem) constexpr">
      <summary>Appends a character to the string.</summary>
      <param name="_Ch">The character to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator+=(std.initializer_list{_Elem})">
      <summary>Appends a copy of a list of characters to the string.</summary>
      <param name="_Ilist">The list of characters to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator+=(std.initializer_list{_Elem}) constexpr">
      <summary>Appends a copy of a list of characters to the string.</summary>
      <param name="_Ilist">The list of characters to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator+=(const._Elem)">
      <summary>Appends a copy of a null-terminated string to the string.</summary>
      <param name="_Ptr">The null-terminated string to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator+=(const._Elem) constexpr">
      <summary>Appends a copy of a null-terminated string to the string.</summary>
      <param name="_Ptr">The null-terminated string to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator+=(pointer.const._Elem)">
      <summary>Appends a copy of a null-terminated string to the string.</summary>
      <param name="_Ptr">The null-terminated string to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator+=(pointer.const._Elem) constexpr">
      <summary>Appends a copy of a null-terminated string to the string.</summary>
      <param name="_Ptr">The null-terminated string to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator+=``2(const._StringViewIsh)">
      <summary>Appends a copy of the contents of a string view to the string.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator+=``2(reference.const._StringViewIsh)">
      <summary>Appends a copy of the contents of a string view to the string.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator+=``2(const._StringViewIsh) constexpr">
      <summary>Appends a copy of the contents of a string view to the string.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator+=``2(reference.const._StringViewIsh) constexpr">
      <summary>Appends a copy of the contents of a string view to the string.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator+=(const.std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Appends a copy of another string to the string.</summary>
      <param name="_Right">The string to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator+=(reference.const.std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Appends a copy of another string to the string.</summary>
      <param name="_Right">The string to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator+=(const.std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Appends a copy of another string to the string.</summary>
      <param name="_Right">The string to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator+=(reference.const.std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Appends a copy of another string to the string.</summary>
      <param name="_Right">The string to append.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=(_Elem)">
      <summary>Assigns a new value to the string.</summary>
      <param name="_Ch">The character to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=(_Elem) constexpr">
      <summary>Assigns a new value to the string.</summary>
      <param name="_Ch">The character to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=(std.initializer_list{_Elem})">
      <summary>Assigns a new value to the string.</summary>
      <param name="_Ilist">The list of characters to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=(std.initializer_list{_Elem}) constexpr">
      <summary>Assigns a new value to the string.</summary>
      <param name="_Ilist">The list of characters to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=(const._Elem)">
      <summary>Assigns a new value to the string.</summary>
      <param name="_Ptr">The null-terminated string to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=(const._Elem) constexpr">
      <summary>Assigns a new value to the string.</summary>
      <param name="_Ptr">The null-terminated string to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=(pointer.const._Elem)">
      <summary>Assigns a new value to the string.</summary>
      <param name="_Ptr">The null-terminated string to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=(pointer.const._Elem) constexpr">
      <summary>Assigns a new value to the string.</summary>
      <param name="_Ptr">The null-terminated string to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=``2(const._StringViewIsh)">
      <summary>Assigns a new value to the string.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=``2(reference.const._StringViewIsh)">
      <summary>Assigns a new value to the string.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=``2(const._StringViewIsh) constexpr">
      <summary>Assigns a new value to the string.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=``2(reference.const._StringViewIsh) constexpr">
      <summary>Assigns a new value to the string.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=(const.std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Assigns a new value to the string.</summary>
      <param name="_Right">The string to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=(reference.const.std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Assigns a new value to the string.</summary>
      <param name="_Right">The string to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=(const.std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Assigns a new value to the string.</summary>
      <param name="_Right">The string to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=(reference.const.std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Assigns a new value to the string.</summary>
      <param name="_Right">The string to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=(std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Assigns a new value to the string.</summary>
      <param name="_Right">The string to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=(std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Assigns a new value to the string.</summary>
      <param name="_Right">The string to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=(rvalue.std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Assigns a new value to the string.</summary>
      <param name="_Right">The string to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.operator=(rvalue.std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Assigns a new value to the string.</summary>
      <param name="_Right">The string to be assigned.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.pop_back noexcept">
      <summary>Removes the last element of the string.</summary>
    </member>
    <member name="M:std.basic_string`3.pop_back noexcept constexpr">
      <summary>Removes the last element of the string.</summary>
    </member>
    <member name="M:std.basic_string`3.push_back(_Elem)">
      <summary>Inserts an element at the end of the string.</summary>
      <param name="_Ch">The character to be added.</param>
    </member>
    <member name="M:std.basic_string`3.push_back(_Elem) constexpr">
      <summary>Inserts an element at the end of the string.</summary>
      <param name="_Ch">The character to be added.</param>
    </member>
    <member name="M:std.basic_string`3.rbegin noexcept">
      <summary>Gets a reverse iterator at the beginning of the string.</summary>
      <returns>Reverse iterator at the beginning of the string.</returns>
    </member>
    <member name="M:std.basic_string`3.rbegin noexcept constexpr">
      <summary>Gets a reverse iterator at the beginning of the string.</summary>
      <returns>Reverse iterator at the beginning of the string.</returns>
    </member>
    <member name="M:std.basic_string`3.rbegin const noexcept">
      <summary>Gets a reverse iterator at the beginning of the string.</summary>
      <returns>A const reverse iterator at the beginning of the string.</returns>
    </member>
    <member name="M:std.basic_string`3.rbegin const noexcept constexpr">
      <summary>Gets a reverse iterator at the beginning of the string.</summary>
      <returns>A const reverse iterator at the beginning of the string.</returns>
    </member>
    <member name="M:std.basic_string`3.rend noexcept">
      <summary>Gets a reverse iterator at the end of the string.</summary>
      <returns>Reverse iterator at the end of the string.</returns>
    </member>
    <member name="M:std.basic_string`3.rend noexcept constexpr">
      <summary>Gets a reverse iterator at the end of the string.</summary>
      <returns>Reverse iterator at the end of the string.</returns>
    </member>
    <member name="M:std.basic_string`3.rend const noexcept">
      <summary>Gets a reverse iterator at the end of the string.</summary>
      <returns>A const reverse iterator at the end of the string.</returns>
    </member>
    <member name="M:std.basic_string`3.rend const noexcept constexpr">
      <summary>Gets a reverse iterator at the end of the string.</summary>
      <returns>A const reverse iterator at the end of the string.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.initializer_list{_Elem})">
      <summary>Replaces a subset of the string with an initializer list.</summary>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Ilist">The initializer list to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.initializer_list{_Elem}) constexpr">
      <summary>Replaces a subset of the string with an initializer list.</summary>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Ilist">The initializer list to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,pointer.const._Elem)">
      <summary>Replaces a subset of the string with a null-terminated string.</summary>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Ptr">The null-terminated string to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,pointer.const._Elem) constexpr">
      <summary>Replaces a subset of the string with a null-terminated string.</summary>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Ptr">The null-terminated string to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,const._Elem)">
      <summary>Replaces a subset of the string with a null-terminated string.</summary>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Ptr">The null-terminated string to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,const._Elem) constexpr">
      <summary>Replaces a subset of the string with a null-terminated string.</summary>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Ptr">The null-terminated string to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace``2(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,reference.const._StringViewIsh)">
      <summary>Replaces a subset of the string with a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_First">An iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Right">The string view to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace``2(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,reference.const._StringViewIsh) constexpr">
      <summary>Replaces a subset of the string with a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Right">The string view to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,reference.const.std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Replaces a subset of the string with a string.</summary>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Right">The string to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,reference.const.std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Replaces a subset of the string with a string.</summary>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Right">The string to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace``2(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,const._StringViewIsh)">
      <summary>Replaces a subset of the string with a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Right">The string view to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace``2(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,const._StringViewIsh) constexpr">
      <summary>Replaces a subset of the string with a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Right">The string view to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,const.std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Replaces a subset of the string with a string.</summary>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Right">The string to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,const.std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Replaces a subset of the string with a string.</summary>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Right">The string to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,pointer.const._Elem)">
      <summary>Replaces a subset of the string with a null-terminated string.</summary>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Ptr">The null-terminated string to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,pointer.const._Elem) constexpr">
      <summary>Replaces a subset of the string with a null-terminated string.</summary>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Ptr">The null-terminated string to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Elem)">
      <summary>Replaces a subset of the string with a null-terminated string.</summary>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Ptr">The null-terminated string to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Elem) constexpr">
      <summary>Replaces a subset of the string with a null-terminated string.</summary>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Ptr">The null-terminated string to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._StringViewIsh)">
      <summary>Replaces a subset of the string with a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Right">The string view to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._StringViewIsh) constexpr">
      <summary>Replaces a subset of the string with a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Right">The string view to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const.std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Replaces a subset of the string with a string.</summary>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Right">The string to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const.std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Replaces a subset of the string with a string.</summary>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Right">The string to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._StringViewIsh)">
      <summary>Replaces a subset of the string with a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Right">The string view to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._StringViewIsh) constexpr">
      <summary>Replaces a subset of the string with a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Right">The string view to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const.std.basic_string{_Elem,_Traits,_Alloc})">
      <summary>Replaces a subset of the string with a string.</summary>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Right">The string to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const.std.basic_string{_Elem,_Traits,_Alloc}) constexpr">
      <summary>Replaces a subset of the string with a string.</summary>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Right">The string to replace the range with.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem)">
      <summary>Replaces a subset of the string with a character.</summary>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Count">The number of times the character will be copied.</param>
      <param name="_Ch">The character to be copied.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem) constexpr">
      <summary>Replaces a subset of the string with a character.</summary>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Count">The number of times the character will be copied.</param>
      <param name="_Ch">The character to be copied.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace``2(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,_Iter,_Iter)">
      <summary>Replaces a subset of the string with a range.</summary>
      <typeparam name="_Iter">Input iterator.</typeparam>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_First2">An iterator to the beginning of the replacement.</param>
      <param name="_Last2">An iterator to the end of the replacement.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace``2(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,_Iter,_Iter) constexpr">
      <summary>Replaces a subset of the string with a range.</summary>
      <typeparam name="_Iter">Input iterator.</typeparam>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_First2">An iterator to the beginning of the replacement.</param>
      <param name="_Last2">An iterator to the end of the replacement.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Replaces a subset of the string with a subset of a null-terminated string.</summary>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Ptr">The null-terminated string to replace the range with.</param>
      <param name="_Count">The number of characters in the replacement to use.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Replaces a subset of the string with a subset of a null-terminated string.</summary>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Ptr">The null-terminated string to replace the range with.</param>
      <param name="_Count">The number of characters in the replacement to use.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Replaces a subset of the string with a subset of a null-terminated string.</summary>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Ptr">The null-terminated string to replace the range with.</param>
      <param name="_Count">The number of characters in the replacement to use.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Replaces a subset of the string with a subset of a null-terminated string.</summary>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Ptr">The null-terminated string to replace the range with.</param>
      <param name="_Count">The number of characters in the replacement to use.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem)">
      <summary>Replaces a subset of the string with a character.</summary>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Count">The number of times the character will be copied.</param>
      <param name="_Ch">The character to be copied.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem) constexpr">
      <summary>Replaces a subset of the string with a character.</summary>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Count">The number of times the character will be copied.</param>
      <param name="_Ch">The character to be copied.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Replaces a subset of the string with a subset of a null-terminated string.</summary>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Ptr">The null-terminated string to replace the range with.</param>
      <param name="_Count">The number of characters in the replacement to use.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Replaces a subset of the string with a subset of a null-terminated string.</summary>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Ptr">The null-terminated string to replace the range with.</param>
      <param name="_Count">The number of characters in the replacement to use.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Replaces a subset of the string with a subset of a null-terminated string.</summary>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Ptr">The null-terminated string to replace the range with.</param>
      <param name="_Count">The number of characters in the replacement to use.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Replaces a subset of the string with a subset of a null-terminated string.</summary>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Ptr">The null-terminated string to replace the range with.</param>
      <param name="_Count">The number of characters in the replacement to use.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Replaces a subset of the string with a subset of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Right">The string view to replace the range with.</param>
      <param name="_Roff">The start position in the replacement view.</param>
      <param name="_Count">The number of characters in the string view to copy.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Replaces a subset of the string with a subset of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Right">The string view to replace the range with.</param>
      <param name="_Roff">The start position in the replacement view.</param>
      <param name="_Count">The number of characters in the string view to copy.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Replaces a subset of the string with a subset of a string.</summary>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Right">The string to replace the range with.</param>
      <param name="_Roff">The start position in the replacement string.</param>
      <param name="_Count">The number of characters in the string to copy.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Replaces a subset of the string with a subset of a string.</summary>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Right">The string to replace the range with.</param>
      <param name="_Roff">The start position in the replacement string.</param>
      <param name="_Count">The number of characters in the string to copy.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Replaces a subset of the string with a subset of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Right">The string view to replace the range with.</param>
      <param name="_Roff">The start position in the replacement view.</param>
      <param name="_Count">The number of characters in the string view to copy.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace``2(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Replaces a subset of the string with a subset of a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Right">The string view to replace the range with.</param>
      <param name="_Roff">The start position in the replacement view.</param>
      <param name="_Count">The number of characters in the string view to copy.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Replaces a subset of the string with a subset of a string.</summary>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Right">The string to replace the range with.</param>
      <param name="_Roff">The start position in the replacement string.</param>
      <param name="_Count">The number of characters in the string to copy.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type,const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Replaces a subset of the string with a subset of a string.</summary>
      <param name="_Off">The index at which to replace in the string.</param>
      <param name="_Nx">The number of characters to replace.</param>
      <param name="_Right">The string to replace the range with.</param>
      <param name="_Roff">The start position in the replacement string.</param>
      <param name="_Count">The number of characters in the string to copy.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace_with_range``1(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,rvalue._Rng) constexpr">
      <summary>Replaces a subset of the string with a range.</summary>
      <typeparam name="_Rng">Container range.</typeparam>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Range">The range of the replacement.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.replace_with_range``1(std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,std.basic_string{_Elem,_Traits,_Alloc}.const_iterator,_Rng) constexpr">
      <summary>Replaces a subset of the string with a range.</summary>
      <typeparam name="_Rng">Container range.</typeparam>
      <param name="_First">A const iterator to the first character to be replaced.</param>
      <param name="_Last">A const iterator to the last character to be replaced.</param>
      <param name="_Range">The range of the replacement.</param>
      <returns>A reference to the resulting string object.</returns>
    </member>
    <member name="M:std.basic_string`3.reserve(std.basic_string{_Elem,_Traits,_Alloc}.size_type)">
      <summary>Increases the capacity of the string if the current capacity is smaller than the requested value.</summary>
      <param name="_Newcap">The new capacity for the string.</param>
    </member>
    <member name="M:std.basic_string`3.reserve(std.basic_string{_Elem,_Traits,_Alloc}.size_type) constexpr">
      <summary>Increases the capacity of the string if the current capacity is smaller than the requested value.</summary>
      <param name="_Newcap">The new capacity for the string.</param>
    </member>
    <member name="M:std.basic_string`3.reserve">
      <summary>Increases the capacity of the string if the current capacity is smaller than the requested value.</summary>
    </member>
    <member name="M:std.basic_string`3.resize(std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem)">
      <summary>Specifies a new size for a string, appending or erasing elements as required.</summary>
      <param name="_New_size">The new size of the string.</param>
      <param name="_Ch">The optional value to use for appended characters if more characters are required.</param>
    </member>
    <member name="M:std.basic_string`3.resize(std.basic_string{_Elem,_Traits,_Alloc}.size_type,_Elem) constexpr">
      <summary>Specifies a new size for a string, appending or erasing elements as required.</summary>
      <param name="_New_size">The new size of the string.</param>
      <param name="_Ch">The optional value to use for appended characters if more characters are required.</param>
    </member>
    <member name="M:std.basic_string`3.rfind(_Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Performs a reverse search for a character.</summary>
      <param name="_Ch">The character to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.rfind(_Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Performs a reverse search for a character.</summary>
      <param name="_Ch">The character to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>Index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.rfind(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Performs a reverse search for a string view.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.rfind(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Performs a reverse search for a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.rfind(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Performs a reverse search for a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.rfind(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Performs a reverse search for a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.rfind``2(reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Performs a reverse search for a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.rfind``2(reference.const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Performs a reverse search for a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.rfind``2(const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Performs a reverse search for a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.rfind``2(const._StringViewIsh,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Performs a reverse search for a string view.</summary>
      <typeparam name="_StringViewIsh">The type that is convertible to a string view.</typeparam>
      <param name="_Right">The string view to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.rfind(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Performs a reverse search for a string.</summary>
      <param name="_Right">The string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.rfind(reference.const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Performs a reverse search for a string.</summary>
      <param name="_Right">The string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.rfind(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Performs a reverse search for a string.</summary>
      <param name="_Right">The string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.rfind(const.std.basic_string{_Elem,_Traits,_Alloc},std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Performs a reverse search for a string.</summary>
      <param name="_Right">The string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.rfind(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Performs a reverse search for a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.rfind(const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Performs a reverse search for a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.rfind(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept">
      <summary>Performs a reverse search for a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.rfind(pointer.const._Elem,std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const noexcept constexpr">
      <summary>Performs a reverse search for a subset of a null-terminated string.</summary>
      <param name="_Ptr">The null-terminated string to search for.</param>
      <param name="_Off">The starting position of the search.</param>
      <param name="_Count">The length of the subset of the null-terminated string to search for.</param>
      <returns>The index of the occurrence in the string, otherwise npos.</returns>
    </member>
    <member name="M:std.basic_string`3.shrink_to_fit">
      <summary>Discards excess capacity.</summary>
    </member>
    <member name="M:std.basic_string`3.shrink_to_fit constexpr">
      <summary>Discards excess capacity.</summary>
    </member>
    <member name="M:std.basic_string`3.size const noexcept">
      <summary>Gets the length of the string.</summary>
      <returns>Length of the string.</returns>
    </member>
    <member name="M:std.basic_string`3.size const noexcept constexpr">
      <summary>Gets the length of the string.</summary>
      <returns>Length of the string.</returns>
    </member>
    <member name="M:std.basic_string`3.starts_with(_Elem) const noexcept constexpr">
      <summary>Checks whether the string starts with the specified prefix.</summary>
      <param name="_Right">The prefix to look for.</param>
      <returns>True if the string starts with the specified prefix, false otherwise.</returns>
    </member>
    <member name="M:std.basic_string`3.starts_with(const._Elem) const noexcept constexpr">
      <summary>Checks whether the string starts with the specified prefix.</summary>
      <param name="_Right">The prefix to look for.</param>
      <returns>True if the string starts with the specified prefix, false otherwise.</returns>
    </member>
    <member name="M:std.basic_string`3.starts_with(pointer.const._Elem) const noexcept constexpr">
      <summary>Checks whether the string starts with the specified prefix.</summary>
      <param name="_Right">The prefix to look for.</param>
      <returns>True if the string starts with the specified prefix, false otherwise.</returns>
    </member>
    <member name="M:std.basic_string`3.starts_with(std.basic_string_view{_Elem,_Traits}) const noexcept constexpr">
      <summary>Checks whether the string starts with the specified prefix.</summary>
      <param name="_Right">The prefix to look for.</param>
      <returns>True if the string starts with the specified prefix, false otherwise.</returns>
    </member>
    <member name="M:std.basic_string`3.substr(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) &amp;&amp; constexpr">
      <summary>Creates a copy of a subset of the string.</summary>
      <param name="_Off">The starting index of the copy. Defaults to 0.</param>
      <param name="_Count">The length of the substring. Defaults to the length of the string.</param>
      <returns>A substring object that's a copy of characters of the string operand, beginning at the position specified by the first argument.</returns>
    </member>
    <member name="M:std.basic_string`3.substr(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const">
      <summary>Creates a copy of a subset of the string.</summary>
      <param name="_Off">The starting index of the copy. Defaults to 0.</param>
      <param name="_Count">The length of the substring. Defaults to the length of the string.</param>
      <returns>New string from the requested substring.</returns>
    </member>
    <member name="M:std.basic_string`3.substr(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const constexpr">
      <summary>Creates a copy of a subset of the string.</summary>
      <param name="_Off">The starting index of the copy. Defaults to 0.</param>
      <param name="_Count">The length of the substring. Defaults to the length of the string.</param>
      <returns>New string from the requested substring.</returns>
    </member>
    <member name="M:std.basic_string`3.substr(std.basic_string{_Elem,_Traits,_Alloc}.size_type,std.basic_string{_Elem,_Traits,_Alloc}.size_type) const &amp; constexpr">
      <summary>Creates a copy of a subset of the string.</summary>
      <param name="_Off">The starting index of the copy. Defaults to 0.</param>
      <param name="_Count">The length of the substring. Defaults to the length of the string.</param>
      <returns>New string from the requested substring.</returns>
    </member>
    <member name="M:std.basic_string`3.swap(std.basic_string{_Elem,_Traits,_Alloc}) noexcept">
      <summary>Exchange the contents of two strings.</summary>
      <param name="_Right">The string to be exchanged.</param>
    </member>
    <member name="M:std.basic_string`3.swap(std.basic_string{_Elem,_Traits,_Alloc}) noexcept constexpr">
      <summary>Exchange the contents of two strings.</summary>
      <param name="_Right">The string to be exchanged.</param>
    </member>
    <member name="M:std.basic_string`3.swap(reference.std.basic_string{_Elem,_Traits,_Alloc}) noexcept">
      <summary>Exchange the contents of two strings.</summary>
      <param name="_Right">The string to be exchanged.</param>
    </member>
    <member name="M:std.basic_string`3.swap(reference.std.basic_string{_Elem,_Traits,_Alloc}) noexcept constexpr">
      <summary>Exchange the contents of two strings.</summary>
      <param name="_Right">The string to be exchanged.</param>
    </member>
    <member name="std.basic_string`3.allocator_type">
      <summary>A type that manages memory allocations for a string object.</summary>
    </member>
    <member name="std.basic_string`3.const_iterator">
      <summary>A random-access iterator that has read access to the characters in a string.  The direction of iteration is toward the end of the string.</summary>
    </member>
    <member name="std.basic_string`3.const_pointer">
      <summary>A pointer that has read access to the characters in a string.</summary>
    </member>
    <member name="std.basic_string`3.const_reference">
      <summary>A read-only reference to a character in a string.</summary>
    </member>
    <member name="std.basic_string`3.const_reverse_iterator">
      <summary>A random-access iterator that has read access to the characters in a string. The direction of iteration is toward the beginning of the string - the reverse of a standard iterator.</summary>
    </member>
    <member name="std.basic_string`3.difference_type">
      <summary>The signed integer type describes an object that can represent the difference between the addresses of any two characters in string.</summary>
    </member>
    <member name="std.basic_string`3.iterator">
      <summary>A random-access iterator that has read/write access to the characters in a string. The direction of iteration is from the beginning of the string toward the end.</summary>
    </member>
    <member name="std.basic_string`3.pointer">
      <summary>A pointer that has read/write access to the characters in a string.</summary>
    </member>
    <member name="std.basic_string`3.reference">
      <summary>A read/write reference to a character in a string.</summary>
    </member>
    <member name="std.basic_string`3.reverse_iterator">
      <summary>A random-access iterator that has read/write access to the characters in a string. The direction of iteration is toward the beginning of the string - the reverse of a standard iterator.</summary>
    </member>
    <member name="std.basic_string`3.size_type">
      <summary>An unsigned integral type. When compiling for a 32-bit target, this type is 4 bytes. When compiling for a 64-bit target, this type is 8 bytes.</summary>
    </member>
    <member name="std.basic_string`3.traits_type">
      <summary>A type for the character traits of the characters stored in a string.</summary>
    </member>
    <member name="std.basic_string`3.value_type">
      <summary>A type that represents the type of characters stored in a string.</summary>
    </member>
    <member name="F:std.basic_string`3.npos constexpr">
      <summary>An unsigned integral value that indicates that the index searched for does not exist. When passed as an argument to functions that accept a starting position or length, it means to consider all remaining characters.</summary>
    </member>
  </members>
<Signature xmlns="http://www.w3.org/2000/09/xmldsig#"><SignedInfo><CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /><SignatureMethod Algorithm="http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" /><Reference URI=""><Transforms><Transform Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-signature" /><Transform Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" /></Transforms><DigestMethod Algorithm="http://www.w3.org/2001/04/xmlenc#sha256" /><DigestValue>lGsNjtPIYkkVD63BOnsGDpK7zQ3iJlqiPevAyGn7oI4=</DigestValue></Reference></SignedInfo><SignatureValue>Iz9Lfu6/6Jl4VMA/Z1MGPwSw8xLISz74jIv3BmY5amn5jzZyTO/nhgt1HBd9GR/GcmcI+g6+5NEj3iSgOEAB378AWAKFr2AkrljOb53VJdCK/SD8JG6dPg2JcPoSaiFlJaHlVaALiJI9Nq3m6y8O9dOt7EXFQodWSIF/eSvWu2bfjlrUAe8I7++vApYCam1Xk0SXSq/Ommm2zQ+CE2cd5NcDtbGrwTsbm/twbvwtniYR25UIJM8xiU+f3a9TeEAe/F2ZzlmsRZICLPItoQUWPZt1fpa9xfNfQt3StmEncZk09Ni0DARVMfz/GwU1+9YUOJTOMAaksy+f+eOmnh0Jqg==</SignatureValue><KeyInfo><KeyValue><RSAKeyValue><Modulus>zkvLNa2un9GBrYNDoRGkGv7d0PqtTBB4ViYakFbjuWpmF0KcvDAzzaCWJPhVgIXjz+S8cHEoHuWnp/n+UOljT3ehA8Rs6Lb1aTYub3tB/e0txewv2sQ3yscjYdtTBtFvEm9L8Yv76K3Cxzi/Yvrdg+sr7w8y5RHn1Am0Ff8xggY1xpWCXFI+kQM18njQDcUqSlwBnexYfqHBhzz6YXA/S0EziYBu2O2mM7R6gSyYkEOHgIGTVOGnOvvC5xBgC4KNcnQuQSRLiUI2CmzU8vefR6ykruyzt1rNMPI8OqWHQtSDKXU5JNqbk4GNjwzcwbSzOHrxuxWHq91l/vLdVDGDUw==</Modulus><Exponent>AQAB</Exponent></RSAKeyValue></KeyValue><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data></KeyInfo><Object Id="ts-countersig"><X509Data><X509Certificate>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</X509Certificate><X509Certificate>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</X509Certificate></X509Data><CounterSignature ts-format="cms-timestamp-message" xmlns="http://schemas.microsoft.com/xmldsig/timestamp/2003">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</CounterSignature></Object></Signature></doc>
