#pragma once
#include <cstdint>
namespace FiddlerXPL {
    using FD_SessionHandle = void*;
    using FD_HTTPHeadersHandle = void*;
    using FD_WebSocketMessageHandle = void*;
    using FD_WebSocketHandle = void*;
    using FD_SessionListHandle = void*;
    using FD_StartupSettingsHandle = void*;
    
    enum class FD_WebSocketFrameTypes :int32_t {
        continuation,
        text,
        binary,
        close = 8,
        ping,
        pong,
    };

    enum class FD_SessionBitFlags :int32_t {
        //     No flags are set
        None = 0x0,
        //     The request originally arrived with a URL specifying the HTTPS protocol.
        IsHTTPS = 0x1,
        //     The request originally arrived with a URL specifying the FTP protocol.
        IsFTP = 0x2,
        //     Ignore this traffic; do not buffer, store, or call event handlers
        Ignored = 0x4,
        //     The client pipe was reused
        ClientPipeReused = 0x8,
        //     The server pipe was reused
        ServerPipeReused = 0x10,
        //     The request was transmitted to the server when its headers were complete
        RequestStreamed = 0x20,
        //     The response was streamed
        ResponseStreamed = 0x40,
        //     The request was generated by Fiddler itself (e.g. the Composer tab)
        RequestGeneratedByFiddler = 0x80,
        //     The response was generated by Fiddler itself (e.g. AutoResponder or utilCreateResponseAndBypassServer)
        ResponseGeneratedByFiddler = 0x100,
        //     This session was loaded from a .SAZ File
        LoadedFromSAZ = 0x200,
        //     This session was loaded from some other tool
        ImportedFromOtherTool = 0x400,
        //     This request was sent to an upstream (CERN) gateway proxy
        SentToGateway = 0x800,
        //     This is a "blind" CONNECT tunnel for HTTPS traffic
        IsBlindTunnel = 0x1000,
        //     This is a CONNECT tunnel which decrypts HTTPS traffic as it flows through
        IsDecryptingTunnel = 0x2000,
        //     This response was served from a client cache, bypassing Fiddler. Fiddler only
        //     "sees" this session because other software reported it to Fiddler
        ServedFromCache = 0x4000,
        //     There was a HTTP Protocol violation in the client's request
        ProtocolViolationInRequest = 0x8000,
        //     There was a HTTP Protocol violation in the server's response
        ProtocolViolationInResponse = 0x10000,
        //     Response body was dropped, e.g due to fiddler.network.streaming.ForgetStreamedData
        //     or log-drop-response-body flag
        ResponseBodyDropped = 0x20000,
        //     This is a CONNECT tunnel for WebSocket traffic
        IsWebSocketTunnel = 0x40000,
        //     This request was sent using the SOCKS protocol
        SentToSOCKSGateway = 0x80000,
        //     Request body was dropped, e.g due to log-drop-request-body flag
        RequestBodyDropped = 0x100000,
        //     The request was to create a RPC tunnel (e.g. on an RPC_OUT_DATA request)
        IsRPCTunnel = 0x200000
    };
}