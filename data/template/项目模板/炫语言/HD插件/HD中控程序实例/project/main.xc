//全局控制变量
逻辑型 是否开启调试信息 = 真
整型 全局操作计数器 = 0
//维护一个全局的账号信息数组
HD账号 中控账号信息数组[HD_中控最大多开数]
类 主窗口类 继承 窗口类
	[绑定信息] //IDE自动生成的UI绑定信息(UI变量绑定,事件绑定), 不建议新人手动修改, 可收缩隐藏
		[列表类, _账号信息List, "账号信息List"]
			[元素事件_鼠标左键双击, 账号信息List_鼠标左键双击, 1]
			[元素事件_列表模板创建完成, 账号信息List_项模板创建完成, 1]
			[元素事件_鼠标左键弹起, 账号信息List_鼠标左键弹出, 1]
		[按钮类, _开启, "开启"]
			[元素事件_按钮点击, 开启_按钮点击, 1]
		[按钮类, _暂停, "暂停"]
			[元素事件_按钮点击, 暂停_按钮点击, 1]
		[按钮类, _恢复, "恢复"]
			[元素事件_按钮点击, 恢复_按钮点击, 1]
		[按钮类, _结束, "结束"]
			[元素事件_按钮点击, 结束_按钮点击, 1]
		[按钮类, _全部开启, "全部开启"]
			[元素事件_按钮点击, 全部开启_按钮点击, 1]
		[按钮类, _全部暂停, "全部暂停"]
			[元素事件_按钮点击, 全部暂停_按钮点击, 1]
		[按钮类, _全部恢复, "全部恢复"]
			[元素事件_按钮点击, 全部恢复_按钮点击, 1]
		[按钮类, _全部结束, "全部结束"]
			[元素事件_按钮点击, 全部结束_按钮点击, 1]
		[按钮类, _全部重启, "全部重启"]
			[元素事件_按钮点击, 全部重启_按钮点击, 1]
		[按钮类, _重启, "重启"]
			[元素事件_按钮点击, 重启_按钮点击, 1]
		[编辑框类, _中控日志编辑框, "中控日志编辑框"]
		
	文本型  _布局文件 = "main.xml"//关联的UI窗口布局文件
	函数 整型 运行() //窗口启动函数, 优先自动处理内部(加载窗口布局文件, 绑定UI变量, 注册UI事件), 然后窗口创建完成, 调用用户代码
		//此处窗口已创建完成, 用户可在此处操作或导入初始数据到UI
		//列表UI初始化和账号信息
		逻辑型 bLoad = _账号信息List.置项模板文件("hd_list_ltem.xml")
		_账号信息List.列表头创建数据适配器()
		_账号信息List.创建数据适配器(9)
		_账号信息List.添加列文本(60, "name1", "序号")
		_账号信息List.添加列文本(80, "name2", "账号")
		_账号信息List.添加列文本(80, "name3", "密码")
		_账号信息List.添加列文本(80, "name4", "邮箱")
		_账号信息List.添加列文本(250, "name5", "人物信息")
		_账号信息List.添加列文本(200, "name6", "操作信息")
		_账号信息List.添加列文本(300, "name7", "状态信息")
		_账号信息List.添加列文本(150, "name8", "代理信息")
		_账号信息List.添加列文本(150, "name9", "备注信息")
		文本型 当前状态信息 = "[主]->E:0 P:0 S:-1 | [次]->E:0 P:0 S:-1 "
		//从窗口序号1开始到61  -> 1~30 32~61共60个目标绑定窗口
		变量循环 (整型 i = 1; i < HD_中控最大多开数; i++)
			中控账号信息数组[i].初始化(i)
			整型 index = _账号信息List.添加行文本(到文本(i))
			_账号信息List.置项文本(index, 1, "")
			_账号信息List.置项文本(index, 2, "")
			_账号信息List.置项文本(index, 3, "")
			_账号信息List.置项文本(index, 4, "")
			_账号信息List.置项文本(index, 5, "")
			_账号信息List.置项文本(index, 6, 当前状态信息)
			_账号信息List.置项文本(index, 7, "127.0.0.1:3388")
			_账号信息List.置项文本(index, 8, "HD多线程模板")
			调试输出(i)
		//这里还可以对列表UI进行其他初始化
		//初始化HD插件
		长整型 插件返回值 = HD插件环境初始化_(32)
		如果 (插件返回值 <= 0)
			文本型 标题 = "HD多线程模板环境初始化失败 错误值:" + 到文本(插件返回值)
			本类->置标题(标题)
			显示(真)  //显示出窗口
			返回 0
		//初始化多线程
		长整型 多线程返回值 = HD初始化多线程环境((长整型)(本类->取HWND()), 本类)
		如果 (多线程返回值 <= 0)
			文本型 标题 = "HD初始化多线程环境失败 错误值:" + 到文本(多线程返回值)
			本类->置标题(标题)
			显示(真)  //显示出窗口
			返回 0
		//还可以初始化其他
		//...
		文本型 标题 = "HD中控多线程初始化成功 当前版本号:" + 到文本(HD登录_获取版本号())
		本类->置标题(标题)
		显示(真)  //显示出窗口
		返回 0
	函数 UI事件 整型 账号信息List_鼠标左键双击(元素句柄 来源句柄, 正整型 标识, 点结构 *鼠标位置,逻辑型 *是否拦截)
		调试输出("双击", _账号信息List.取选择行())
		返回 0
	函数 UI事件 整型 账号信息List_项模板创建完成(元素句柄 来源句柄, 列表项结构* 项信息,整型 标识,逻辑型 *是否拦截)
		静态 按钮类  列表选择按钮
		列表选择按钮._句柄 = (元素句柄)_账号信息List.取模板对象(项信息->行索引, 0, 1)
		列表选择按钮.置用户数据(项信息->行索引)
		逻辑型 是否选中 = _账号信息List.取项数据(项信息->行索引, 0)
		列表选择按钮.置选中(是否选中)
		元素_注册事件CPP1(列表选择按钮._句柄, XE_BUTTON_CHECK, &主窗口类::事件_XE_BUTTON_CHECK)
		返回 0
	函数 整型 事件_XE_BUTTON_CHECK(元素句柄 来源句柄, 逻辑型 是否选中, 逻辑型* 是否拦截)
		静态 按钮类 列表选择按钮
		列表选择按钮._句柄 = 来源句柄
		整型 当前行 = 列表选择按钮.取用户数据()
		_账号信息List.置项数据(当前行, 0, 是否选中)
		调试输出("当前选择:", 当前行, 是否选中)
		返回 0
	函数 UI事件 整型 开启_按钮点击(元素句柄 来源句柄, 逻辑型 *是否拦截)
		全局操作计数器 = 全局操作计数器 + 1
		整型 index = _账号信息List.取选择行()
		如果 (index == -1)
			_中控日志编辑框.置文本(到文本(全局操作计数器) + "->HD多线程_开启窗口:请选择一行需要开启的序号")
			返回 0
		整型 当前窗口序号 = 文本到整型(_账号信息List.取项文本(index, 0))
		长整型 ret = HD多线程_开启窗口(当前窗口序号)
		_中控日志编辑框.置文本(到文本(全局操作计数器) + "->HD多线程_开启窗口[" + 到文本(当前窗口序号) + "]:" + 到文本(ret))
		返回 0
	函数 UI事件 整型 暂停_按钮点击(元素句柄 来源句柄, 逻辑型 *是否拦截)
		全局操作计数器 = 全局操作计数器 + 1
		整型 index = _账号信息List.取选择行()
		如果 (index == -1)
			_中控日志编辑框.置文本(到文本(全局操作计数器) + "->HD多线程_暂停窗口:请选择一行需要开启的序号")
			返回 0
		整型 当前窗口序号 = 文本到整型(_账号信息List.取项文本(index, 0))
		长整型 ret = HD多线程_暂停窗口(当前窗口序号)
		_中控日志编辑框.置文本(到文本(全局操作计数器) + "->HD多线程_暂停窗口[" + 到文本(当前窗口序号) + "]:" + 到文本(ret))
		返回 0
	函数 UI事件 整型 恢复_按钮点击(元素句柄 来源句柄, 逻辑型 *是否拦截)
		全局操作计数器 = 全局操作计数器 + 1
		整型 index = _账号信息List.取选择行()
		如果 (index == -1)
			_中控日志编辑框.置文本(到文本(全局操作计数器) + "->HD多线程_恢复窗口:请选择一行需要开启的序号")
			返回 0
		整型 当前窗口序号 = 文本到整型(_账号信息List.取项文本(index, 0))
		长整型 ret = HD多线程_恢复窗口(当前窗口序号)
		_中控日志编辑框.置文本(到文本(全局操作计数器) + "->HD多线程_恢复窗口[" + 到文本(当前窗口序号) + "]:" + 到文本(ret))
		返回 0
	函数 UI事件 整型 结束_按钮点击(元素句柄 来源句柄, 逻辑型 *是否拦截)
		全局操作计数器 = 全局操作计数器 + 1
		整型 index = _账号信息List.取选择行()
		如果 (index == -1)
			_中控日志编辑框.置文本(到文本(全局操作计数器) + "->HD多线程_停止窗口:请选择一行需要开启的序号")
			返回 0
		整型 当前窗口序号 = 文本到整型(_账号信息List.取项文本(index, 0))
		长整型 ret = HD多线程_停止窗口(当前窗口序号)
		_中控日志编辑框.置文本(到文本(全局操作计数器) + "->HD多线程_停止窗口[" + 到文本(当前窗口序号) + "]:" + 到文本(ret))
		返回 0
	函数 UI事件 整型 重启_按钮点击(元素句柄 来源句柄, 逻辑型 *是否拦截)
		全局操作计数器 = 全局操作计数器 + 1
		整型 index = _账号信息List.取选择行()
		如果 (index == -1)
			_中控日志编辑框.置文本(到文本(全局操作计数器) + "->HD多线程_重启窗口Msg:请选择一行需要开启的序号")
			返回 0
		整型 当前窗口序号 = 文本到整型(_账号信息List.取项文本(index, 0))
		长整型 ret = HD多线程_重启窗口Msg(当前窗口序号)
		_中控日志编辑框.置文本(到文本(全局操作计数器) + "->HD多线程_重启窗口Msg[" + 到文本(当前窗口序号) + "]:" + 到文本(ret))
		返回 0
	函数 UI事件 整型 全部开启_按钮点击(元素句柄 来源句柄, 逻辑型 *是否拦截)
		全局操作计数器 = 全局操作计数器 + 1
		文本型 日志信息 = ""
		变量循环 (整型 i = 0; i < HD_中控最大多开数; i++)
			如果 (_账号信息List.取项数据(i, 0))
				长整型 ret = HD多线程_开启窗口(i + 1)
				日志信息 = 日志信息 + (到文本(全局操作计数器) + "->HD多线程_开启窗口[" +到文本(i + 1) + "]:" + 到文本(ret)) + "\r\n"


		_中控日志编辑框.置文本(日志信息)
		返回 0
	函数 UI事件 整型 全部暂停_按钮点击(元素句柄 来源句柄, 逻辑型 *是否拦截)
		全局操作计数器 = 全局操作计数器 + 1
		文本型 日志信息 = ""
		变量循环 (整型 i = 0; i < HD_中控最大多开数; i++)
			如果 (_账号信息List.取项数据(i, 0))
				长整型 ret = HD多线程_暂停窗口(i + 1)
				日志信息 = 日志信息 + (到文本(全局操作计数器) + "->HD多线程_暂停窗口[" +到文本(i + 1) + "]:" + 到文本(ret)) + "\r\n"
		_中控日志编辑框.置文本(日志信息)
		返回 0
	函数 UI事件 整型 全部恢复_按钮点击(元素句柄 来源句柄, 逻辑型 *是否拦截)
		全局操作计数器 = 全局操作计数器 + 1
		文本型 日志信息 = ""
		变量循环 (整型 i = 0; i < HD_中控最大多开数; i++)
			如果 (_账号信息List.取项数据(i, 0))
				长整型 ret = HD多线程_恢复窗口(i + 1)
				日志信息 = 日志信息 + (到文本(全局操作计数器) + "->HD多线程_恢复窗口[" +到文本(i + 1) + "]:" + 到文本(ret)) + "\r\n"
				_中控日志编辑框.置文本(日志信息)
		返回 0
	函数 UI事件 整型 全部结束_按钮点击(元素句柄 来源句柄, 逻辑型 *是否拦截)
		全局操作计数器 = 全局操作计数器 + 1
		文本型 日志信息 = ""
		变量循环 (整型 i = 0; i < HD_中控最大多开数; i++)
			如果 (_账号信息List.取项数据(i, 0))
				长整型 ret = HD多线程_停止窗口(i + 1)
				日志信息 = 日志信息 + (到文本(全局操作计数器) + "->HD多线程_停止窗口[" +到文本(i + 1) + "]:" + 到文本(ret)) + "\r\n"
				_中控日志编辑框.置文本(日志信息)
		返回 0
	函数 UI事件 整型 全部重启_按钮点击(元素句柄 来源句柄, 逻辑型 *是否拦截)
		全局操作计数器 = 全局操作计数器 + 1
		文本型 日志信息 = ""
		变量循环 (整型 i = 0; i < HD_中控最大多开数; i++)
			如果 (_账号信息List.取项数据(i, 0))
				长整型 ret = HD多线程_重启窗口Msg(i + 1)
				日志信息 = 日志信息 + (到文本(全局操作计数器) + "->HD多线程_重启窗口Msg[" +到文本(i + 1) + "]:" + 到文本(ret)) + "\r\n"
				_中控日志编辑框.置文本(日志信息)
		返回 0
	函数 UI事件 整型 账号信息List_鼠标左键弹出(元素句柄 来源句柄, 正整型 标识, 点结构 *鼠标位置,逻辑型 *是否拦截)
		整型 当前行 = _账号信息List.取选择行()
		调试输出("单击选择", 当前行)
		如果 (当前行 ==-1)
			返回 0
		_账号信息List.置项数据(_账号信息List.取选择行(), 0, !_账号信息List.取项数据(当前行, 0))
		静态 按钮类 列表选择按钮
		列表选择按钮._句柄 = (元素句柄)_账号信息List.取模板对象(当前行, 0, 1)
		列表选择按钮.置选中(_账号信息List.取项数据(当前行, 0))
		返回 0



主窗口类  主窗口  //将上面IDE生成的界面类在这里定义变量(实例化到具体变量)
函数 整型 入口函数_窗口() //窗口程序入口函数, 程序启动优先进入此函数
	//在进入UI前需要运行的代码写在这里

	炫彩_初始化(真)  //初始化设计器使用的炫彩界面库
	炫彩_启用自动重绘UI(真) //当修改UI后将自动调用重绘函数更新UI
	#加载资源文件     //指示在此处自动加载资源文件, 根据项目属性设置, 从文件 或 从内存
	主窗口.运行()    //运行上面设计器生成的类中的运行()函数
	//在进入UI后需要运行的代码写在这里

	炫彩_运行()  //运行消息循环
	炫彩_退出()  //程序退出释放界面库资源
	返回 0

// [文档]<炫语言> 在线手册: http://www.xcgui.com/doc
// [视频]<炫语言> 入门教程: https://www.bilibili.com/video/BV1KM411h7KK
//
// [文档]<炫彩界面库> 最新在线文档: http://www.xcgui.com/doc-ui
// [视频]<炫彩界面库> 通用教程: https://www.bilibili.com/video/BV1kA411A71p/
//
// [商城]炫彩资源商城: http://mall.xcgui.com
//
// *新手尽量不要使用指针, 例如: 字符串使用"文本型", 函数参数若要返回值使用引用 "函数名(整型 &输入输出参数)",
//  内存使用"字节集"
//
//  文本型   双字节字符串  =  炫语言默认字符串类型  =  "字符串W"
//  文本型A  单字节字符串  =  易语言字符串类型     =  A"字符串A"
//  utf8字符串  = U"UTF8字符串"
//  A2W()   单字节字符串 转 双字节字符串
//  W2A()   双字节字符串 转 单字节字符串
//  A =  char    =  单字节
//  w =  wchar_t = 双字节 = UNICODE
//  两个文件中结构体类型互相包含导致冲突, 请将结构体定义移动到一个独立文件中
